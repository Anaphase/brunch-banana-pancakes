// Generated by CoffeeScript 1.4.0
(function() {
  var LESSCompiler, less, sysPath,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  less = require('less');

  sysPath = require('path');

  module.exports = LESSCompiler = (function() {

    LESSCompiler.prototype.brunchPlugin = true;

    LESSCompiler.prototype.type = 'stylesheet';

    LESSCompiler.prototype.extension = 'less';

    LESSCompiler.prototype._dependencyRegExp = /^ *@import ['"](.*)['"]/;

    function LESSCompiler(config) {
      this.config = config;
      this.getDependencies = __bind(this.getDependencies, this);

      null;
    }

    LESSCompiler.prototype.compile = function(data, path, callback) {
      var parser,
        _this = this;
      parser = new less.Parser({
        paths: [this.config.paths.root, sysPath.dirname(path)],
        filename: path
      });
      return parser.parse(data, function(error, tree) {
        var err, result;
        if (error != null) {
          return callback(error.message);
        }
        result = null;
        err = null;
        try {
          result = tree.toCSS();
        } catch (ex) {
          err = "" + ex.type + "Error:" + ex.message;
          if (ex.filename) {
            err += " in '" + ex.filename + ":" + ex.line + ":" + ex.column + "'";
          }
        }
        return callback(err, result);
      });
    };

    LESSCompiler.prototype.getDependencies = function(data, path, callback) {
      var dependencies, parent,
        _this = this;
      parent = sysPath.dirname(path);
      dependencies = data.split('\n').map(function(line) {
        return line.match(_this._dependencyRegExp);
      }).filter(function(match) {
        return (match != null ? match.length : void 0) > 0;
      }).map(function(match) {
        return match[1];
      }).filter(function(path) {
        return !!path && path !== 'nib';
      }).map(function(path) {
        if (sysPath.extname(path) !== ("." + _this.extension)) {
          return path + ("." + _this.extension);
        } else {
          return path;
        }
      }).map(function(path) {
        if (path.charAt(0) === '/') {
          return sysPath.join(_this.config.paths.root, path.slice(1));
        } else {
          return sysPath.join(parent, path);
        }
      });
      return process.nextTick(function() {
        return callback(null, dependencies);
      });
    };

    return LESSCompiler;

  })();

}).call(this);
