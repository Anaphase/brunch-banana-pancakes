/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['reporters/json-cov.js']) {
  _$jscoverage['reporters/json-cov.js'] = [];
  _$jscoverage['reporters/json-cov.js'][6] = 0;
  _$jscoverage['reporters/json-cov.js'][12] = 0;
  _$jscoverage['reporters/json-cov.js'][22] = 0;
  _$jscoverage['reporters/json-cov.js'][23] = 0;
  _$jscoverage['reporters/json-cov.js'][26] = 0;
  _$jscoverage['reporters/json-cov.js'][28] = 0;
  _$jscoverage['reporters/json-cov.js'][32] = 0;
  _$jscoverage['reporters/json-cov.js'][33] = 0;
  _$jscoverage['reporters/json-cov.js'][36] = 0;
  _$jscoverage['reporters/json-cov.js'][37] = 0;
  _$jscoverage['reporters/json-cov.js'][40] = 0;
  _$jscoverage['reporters/json-cov.js'][41] = 0;
  _$jscoverage['reporters/json-cov.js'][44] = 0;
  _$jscoverage['reporters/json-cov.js'][45] = 0;
  _$jscoverage['reporters/json-cov.js'][46] = 0;
  _$jscoverage['reporters/json-cov.js'][47] = 0;
  _$jscoverage['reporters/json-cov.js'][48] = 0;
  _$jscoverage['reporters/json-cov.js'][49] = 0;
  _$jscoverage['reporters/json-cov.js'][50] = 0;
  _$jscoverage['reporters/json-cov.js'][51] = 0;
  _$jscoverage['reporters/json-cov.js'][52] = 0;
  _$jscoverage['reporters/json-cov.js'][65] = 0;
  _$jscoverage['reporters/json-cov.js'][66] = 0;
  _$jscoverage['reporters/json-cov.js'][75] = 0;
  _$jscoverage['reporters/json-cov.js'][76] = 0;
  _$jscoverage['reporters/json-cov.js'][77] = 0;
  _$jscoverage['reporters/json-cov.js'][78] = 0;
  _$jscoverage['reporters/json-cov.js'][79] = 0;
  _$jscoverage['reporters/json-cov.js'][80] = 0;
  _$jscoverage['reporters/json-cov.js'][83] = 0;
  _$jscoverage['reporters/json-cov.js'][84] = 0;
  _$jscoverage['reporters/json-cov.js'][87] = 0;
  _$jscoverage['reporters/json-cov.js'][88] = 0;
  _$jscoverage['reporters/json-cov.js'][100] = 0;
  _$jscoverage['reporters/json-cov.js'][101] = 0;
  _$jscoverage['reporters/json-cov.js'][110] = 0;
  _$jscoverage['reporters/json-cov.js'][111] = 0;
  _$jscoverage['reporters/json-cov.js'][113] = 0;
  _$jscoverage['reporters/json-cov.js'][114] = 0;
  _$jscoverage['reporters/json-cov.js'][115] = 0;
  _$jscoverage['reporters/json-cov.js'][116] = 0;
  _$jscoverage['reporters/json-cov.js'][117] = 0;
  _$jscoverage['reporters/json-cov.js'][118] = 0;
  _$jscoverage['reporters/json-cov.js'][121] = 0;
  _$jscoverage['reporters/json-cov.js'][129] = 0;
  _$jscoverage['reporters/json-cov.js'][131] = 0;
  _$jscoverage['reporters/json-cov.js'][143] = 0;
  _$jscoverage['reporters/json-cov.js'][144] = 0;
}
_$jscoverage['reporters/json-cov.js'][6]++;
var Base = require("./base");
_$jscoverage['reporters/json-cov.js'][12]++;
exports = module.exports = JSONCov;
_$jscoverage['reporters/json-cov.js'][22]++;
function JSONCov(runner, output) {
  _$jscoverage['reporters/json-cov.js'][23]++;
  var self = this, output = 1 == arguments.length? true: output;
  _$jscoverage['reporters/json-cov.js'][26]++;
  Base.call(this, runner);
  _$jscoverage['reporters/json-cov.js'][28]++;
  var tests = [], failures = [], passes = [];
  _$jscoverage['reporters/json-cov.js'][32]++;
  runner.on("test end", (function (test) {
  _$jscoverage['reporters/json-cov.js'][33]++;
  tests.push(test);
}));
  _$jscoverage['reporters/json-cov.js'][36]++;
  runner.on("pass", (function (test) {
  _$jscoverage['reporters/json-cov.js'][37]++;
  passes.push(test);
}));
  _$jscoverage['reporters/json-cov.js'][40]++;
  runner.on("fail", (function (test) {
  _$jscoverage['reporters/json-cov.js'][41]++;
  failures.push(test);
}));
  _$jscoverage['reporters/json-cov.js'][44]++;
  runner.on("end", (function () {
  _$jscoverage['reporters/json-cov.js'][45]++;
  var cov = global._$jscoverage || {};
  _$jscoverage['reporters/json-cov.js'][46]++;
  var result = self.cov = map(cov);
  _$jscoverage['reporters/json-cov.js'][47]++;
  result.stats = self.stats;
  _$jscoverage['reporters/json-cov.js'][48]++;
  result.tests = tests.map(clean);
  _$jscoverage['reporters/json-cov.js'][49]++;
  result.failures = failures.map(clean);
  _$jscoverage['reporters/json-cov.js'][50]++;
  result.passes = passes.map(clean);
  _$jscoverage['reporters/json-cov.js'][51]++;
  if (! output) {
    _$jscoverage['reporters/json-cov.js'][51]++;
    return;
  }
  _$jscoverage['reporters/json-cov.js'][52]++;
  process.stdout.write(JSON.stringify(result, null, 2));
}));
}
_$jscoverage['reporters/json-cov.js'][65]++;
function map(cov) {
  _$jscoverage['reporters/json-cov.js'][66]++;
  var ret = {instrumentation: "node-jscoverage", sloc: 0, hits: 0, misses: 0, coverage: 0, files: []};
  _$jscoverage['reporters/json-cov.js'][75]++;
  for (var filename in cov) {
    _$jscoverage['reporters/json-cov.js'][76]++;
    var data = coverage(filename, cov[filename]);
    _$jscoverage['reporters/json-cov.js'][77]++;
    ret.files.push(data);
    _$jscoverage['reporters/json-cov.js'][78]++;
    ret.hits += data.hits;
    _$jscoverage['reporters/json-cov.js'][79]++;
    ret.misses += data.misses;
    _$jscoverage['reporters/json-cov.js'][80]++;
    ret.sloc += data.sloc;
}
  _$jscoverage['reporters/json-cov.js'][83]++;
  if (ret.sloc > 0) {
    _$jscoverage['reporters/json-cov.js'][84]++;
    ret.coverage = (ret.hits / ret.sloc) * 100;
  }
  _$jscoverage['reporters/json-cov.js'][87]++;
  return ret;
}
_$jscoverage['reporters/json-cov.js'][88]++;
;
_$jscoverage['reporters/json-cov.js'][100]++;
function coverage(filename, data) {
  _$jscoverage['reporters/json-cov.js'][101]++;
  var ret = {filename: filename, coverage: 0, hits: 0, misses: 0, sloc: 0, source: {}};
  _$jscoverage['reporters/json-cov.js'][110]++;
  data.source.forEach((function (line, num) {
  _$jscoverage['reporters/json-cov.js'][111]++;
  num++;
  _$jscoverage['reporters/json-cov.js'][113]++;
  if (data[num] === 0) {
    _$jscoverage['reporters/json-cov.js'][114]++;
    ret.misses++;
    _$jscoverage['reporters/json-cov.js'][115]++;
    ret.sloc++;
  }
  else {
    _$jscoverage['reporters/json-cov.js'][116]++;
    if (data[num] !== undefined) {
      _$jscoverage['reporters/json-cov.js'][117]++;
      ret.hits++;
      _$jscoverage['reporters/json-cov.js'][118]++;
      ret.sloc++;
    }
  }
  _$jscoverage['reporters/json-cov.js'][121]++;
  ret.source[num] = {source: line, coverage: data[num] === undefined? "": data[num]};
}));
  _$jscoverage['reporters/json-cov.js'][129]++;
  ret.coverage = ret.hits / ret.sloc * 100;
  _$jscoverage['reporters/json-cov.js'][131]++;
  return ret;
}
_$jscoverage['reporters/json-cov.js'][143]++;
function clean(test) {
  _$jscoverage['reporters/json-cov.js'][144]++;
  return ({title: test.title, fullTitle: test.fullTitle(), duration: test.duration});
}
_$jscoverage['reporters/json-cov.js'].source = ["","/**"," * Module dependencies."," */","","var Base = require('./base');","","/**"," * Expose `JSONCov`."," */","","exports = module.exports = JSONCov;","","/**"," * Initialize a new `JsCoverage` reporter."," *"," * @param {Runner} runner"," * @param {Boolean} output"," * @api public"," */","","function JSONCov(runner, output) {","  var self = this","    , output = 1 == arguments.length ? true : output;","","  Base.call(this, runner);","","  var tests = []","    , failures = []","    , passes = [];","","  runner.on('test end', function(test){","    tests.push(test);","  });","","  runner.on('pass', function(test){","    passes.push(test);","  });","","  runner.on('fail', function(test){","    failures.push(test);","  });","","  runner.on('end', function(){","    var cov = global._$jscoverage || {};","    var result = self.cov = map(cov);","    result.stats = self.stats;","    result.tests = tests.map(clean);","    result.failures = failures.map(clean);","    result.passes = passes.map(clean);","    if (!output) return;","    process.stdout.write(JSON.stringify(result, null, 2 ));","  });","}","","/**"," * Map jscoverage data to a JSON structure"," * suitable for reporting."," *"," * @param {Object} cov"," * @return {Object}"," * @api private"," */","","function map(cov) {","  var ret = {","      instrumentation: 'node-jscoverage'","    , sloc: 0","    , hits: 0","    , misses: 0","    , coverage: 0","    , files: []","  };","","  for (var filename in cov) {","    var data = coverage(filename, cov[filename]);","    ret.files.push(data);","    ret.hits += data.hits;","    ret.misses += data.misses;","    ret.sloc += data.sloc;","  }","","  if (ret.sloc &gt; 0) {","    ret.coverage = (ret.hits / ret.sloc) * 100;","  }","","  return ret;","};","","/**"," * Map jscoverage data for a single source file"," * to a JSON structure suitable for reporting."," *"," * @param {String} filename name of the source file"," * @param {Object} data jscoverage coverage data"," * @return {Object}"," * @api private"," */","","function coverage(filename, data) {","  var ret = {","    filename: filename,","    coverage: 0,","    hits: 0,","    misses: 0,","    sloc: 0,","    source: {}","  };","","  data.source.forEach(function(line, num){","    num++;","","    if (data[num] === 0) {","      ret.misses++;","      ret.sloc++;","    } else if (data[num] !== undefined) {","      ret.hits++;","      ret.sloc++;","    }","","    ret.source[num] = {","        source: line","      , coverage: data[num] === undefined","        ? ''","        : data[num]","    };","  });","","  ret.coverage = ret.hits / ret.sloc * 100;","","  return ret;","}","","/**"," * Return a plain-object representation of `test`"," * free of cyclic properties etc."," *"," * @param {Object} test"," * @return {Object}"," * @api private"," */","","function clean(test) {","  return {","      title: test.title","    , fullTitle: test.fullTitle()","    , duration: test.duration","  }","}"];
