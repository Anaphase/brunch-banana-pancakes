/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['reporters/list.js']) {
  _$jscoverage['reporters/list.js'] = [];
  _$jscoverage['reporters/list.js'][6] = 0;
  _$jscoverage['reporters/list.js'][14] = 0;
  _$jscoverage['reporters/list.js'][23] = 0;
  _$jscoverage['reporters/list.js'][24] = 0;
  _$jscoverage['reporters/list.js'][26] = 0;
  _$jscoverage['reporters/list.js'][30] = 0;
  _$jscoverage['reporters/list.js'][31] = 0;
  _$jscoverage['reporters/list.js'][34] = 0;
  _$jscoverage['reporters/list.js'][35] = 0;
  _$jscoverage['reporters/list.js'][38] = 0;
  _$jscoverage['reporters/list.js'][39] = 0;
  _$jscoverage['reporters/list.js'][41] = 0;
  _$jscoverage['reporters/list.js'][44] = 0;
  _$jscoverage['reporters/list.js'][45] = 0;
  _$jscoverage['reporters/list.js'][48] = 0;
  _$jscoverage['reporters/list.js'][49] = 0;
  _$jscoverage['reporters/list.js'][52] = 0;
  _$jscoverage['reporters/list.js'][53] = 0;
  _$jscoverage['reporters/list.js'][54] = 0;
  _$jscoverage['reporters/list.js'][57] = 0;
  _$jscoverage['reporters/list.js'][64] = 0;
}
_$jscoverage['reporters/list.js'][6]++;
var Base = require("./base"), cursor = Base.cursor, color = Base.color;
_$jscoverage['reporters/list.js'][14]++;
exports = module.exports = List;
_$jscoverage['reporters/list.js'][23]++;
function List(runner) {
  _$jscoverage['reporters/list.js'][24]++;
  Base.call(this, runner);
  _$jscoverage['reporters/list.js'][26]++;
  var self = this, stats = this.stats, n = 0;
  _$jscoverage['reporters/list.js'][30]++;
  runner.on("start", (function () {
  _$jscoverage['reporters/list.js'][31]++;
  console.log();
}));
  _$jscoverage['reporters/list.js'][34]++;
  runner.on("test", (function (test) {
  _$jscoverage['reporters/list.js'][35]++;
  process.stdout.write(color("pass", "    " + test.fullTitle() + ": "));
}));
  _$jscoverage['reporters/list.js'][38]++;
  runner.on("pending", (function (test) {
  _$jscoverage['reporters/list.js'][39]++;
  var fmt = color("checkmark", "  -") + color("pending", " %s");
  _$jscoverage['reporters/list.js'][41]++;
  console.log(fmt, test.fullTitle());
}));
  _$jscoverage['reporters/list.js'][44]++;
  runner.on("pass", (function (test) {
  _$jscoverage['reporters/list.js'][45]++;
  var fmt = color("checkmark", "  \u00e2\u009c\u0093") + color("pass", " %s: ") + color(test.speed, "%dms");
  _$jscoverage['reporters/list.js'][48]++;
  cursor.CR();
  _$jscoverage['reporters/list.js'][49]++;
  console.log(fmt, test.fullTitle(), test.duration);
}));
  _$jscoverage['reporters/list.js'][52]++;
  runner.on("fail", (function (test, err) {
  _$jscoverage['reporters/list.js'][53]++;
  cursor.CR();
  _$jscoverage['reporters/list.js'][54]++;
  console.log(color("fail", "  %d) %s"), ++n, test.fullTitle());
}));
  _$jscoverage['reporters/list.js'][57]++;
  runner.on("end", self.epilogue.bind(self));
}
_$jscoverage['reporters/list.js'][64]++;
List.prototype.__proto__ = Base.prototype;
_$jscoverage['reporters/list.js'].source = ["","/**"," * Module dependencies."," */","","var Base = require('./base')","  , cursor = Base.cursor","  , color = Base.color;","","/**"," * Expose `List`."," */","","exports = module.exports = List;","","/**"," * Initialize a new `List` test reporter."," *"," * @param {Runner} runner"," * @api public"," */","","function List(runner) {","  Base.call(this, runner);","","  var self = this","    , stats = this.stats","    , n = 0;","","  runner.on('start', function(){","    console.log();","  });","","  runner.on('test', function(test){","    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));","  });","","  runner.on('pending', function(test){","    var fmt = color('checkmark', '  -')","      + color('pending', ' %s');","    console.log(fmt, test.fullTitle());","  });","","  runner.on('pass', function(test){","    var fmt = color('checkmark', '  &#226;&#156;&#147;')","      + color('pass', ' %s: ')","      + color(test.speed, '%dms');","    cursor.CR();","    console.log(fmt, test.fullTitle(), test.duration);","  });","","  runner.on('fail', function(test, err){","    cursor.CR();","    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());","  });","","  runner.on('end', self.epilogue.bind(self));","}","","/**"," * Inherit from `Base.prototype`."," */","","List.prototype.__proto__ = Base.prototype;"];
