/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['reporters/json.js']) {
  _$jscoverage['reporters/json.js'] = [];
  _$jscoverage['reporters/json.js'][6] = 0;
  _$jscoverage['reporters/json.js'][14] = 0;
  _$jscoverage['reporters/json.js'][23] = 0;
  _$jscoverage['reporters/json.js'][24] = 0;
  _$jscoverage['reporters/json.js'][25] = 0;
  _$jscoverage['reporters/json.js'][27] = 0;
  _$jscoverage['reporters/json.js'][31] = 0;
  _$jscoverage['reporters/json.js'][32] = 0;
  _$jscoverage['reporters/json.js'][35] = 0;
  _$jscoverage['reporters/json.js'][36] = 0;
  _$jscoverage['reporters/json.js'][39] = 0;
  _$jscoverage['reporters/json.js'][40] = 0;
  _$jscoverage['reporters/json.js'][43] = 0;
  _$jscoverage['reporters/json.js'][44] = 0;
  _$jscoverage['reporters/json.js'][51] = 0;
  _$jscoverage['reporters/json.js'][64] = 0;
  _$jscoverage['reporters/json.js'][65] = 0;
}
_$jscoverage['reporters/json.js'][6]++;
var Base = require("./base"), cursor = Base.cursor, color = Base.color;
_$jscoverage['reporters/json.js'][14]++;
exports = module.exports = JSONReporter;
_$jscoverage['reporters/json.js'][23]++;
function JSONReporter(runner) {
  _$jscoverage['reporters/json.js'][24]++;
  var self = this;
  _$jscoverage['reporters/json.js'][25]++;
  Base.call(this, runner);
  _$jscoverage['reporters/json.js'][27]++;
  var tests = [], failures = [], passes = [];
  _$jscoverage['reporters/json.js'][31]++;
  runner.on("test end", (function (test) {
  _$jscoverage['reporters/json.js'][32]++;
  tests.push(test);
}));
  _$jscoverage['reporters/json.js'][35]++;
  runner.on("pass", (function (test) {
  _$jscoverage['reporters/json.js'][36]++;
  passes.push(test);
}));
  _$jscoverage['reporters/json.js'][39]++;
  runner.on("fail", (function (test) {
  _$jscoverage['reporters/json.js'][40]++;
  failures.push(test);
}));
  _$jscoverage['reporters/json.js'][43]++;
  runner.on("end", (function () {
  _$jscoverage['reporters/json.js'][44]++;
  var obj = {stats: self.stats, tests: tests.map(clean), failures: failures.map(clean), passes: passes.map(clean)};
  _$jscoverage['reporters/json.js'][51]++;
  process.stdout.write(JSON.stringify(obj, null, 2));
}));
}
_$jscoverage['reporters/json.js'][64]++;
function clean(test) {
  _$jscoverage['reporters/json.js'][65]++;
  return ({title: test.title, fullTitle: test.fullTitle(), duration: test.duration});
}
_$jscoverage['reporters/json.js'].source = ["","/**"," * Module dependencies."," */","","var Base = require('./base')","  , cursor = Base.cursor","  , color = Base.color;","","/**"," * Expose `JSON`."," */","","exports = module.exports = JSONReporter;","","/**"," * Initialize a new `JSON` reporter."," *"," * @param {Runner} runner"," * @api public"," */","","function JSONReporter(runner) {","  var self = this;","  Base.call(this, runner);","","  var tests = []","    , failures = []","    , passes = [];","","  runner.on('test end', function(test){","    tests.push(test);","  });","","  runner.on('pass', function(test){","    passes.push(test);","  });","","  runner.on('fail', function(test){","    failures.push(test);","  });","","  runner.on('end', function(){","    var obj = {","        stats: self.stats","      , tests: tests.map(clean)","      , failures: failures.map(clean)","      , passes: passes.map(clean)","    };","","    process.stdout.write(JSON.stringify(obj, null, 2));","  });","}","","/**"," * Return a plain-object representation of `test`"," * free of cyclic properties etc."," *"," * @param {Object} test"," * @return {Object}"," * @api private"," */","","function clean(test) {","  return {","      title: test.title","    , fullTitle: test.fullTitle()","    , duration: test.duration","  }","}"];
