/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['reporters/html.js']) {
  _$jscoverage['reporters/html.js'] = [];
  _$jscoverage['reporters/html.js'][6] = 0;
  _$jscoverage['reporters/html.js'][15] = 0;
  _$jscoverage['reporters/html.js'][21] = 0;
  _$jscoverage['reporters/html.js'][35] = 0;
  _$jscoverage['reporters/html.js'][36] = 0;
  _$jscoverage['reporters/html.js'][40] = 0;
  _$jscoverage['reporters/html.js'][50] = 0;
  _$jscoverage['reporters/html.js'][51] = 0;
  _$jscoverage['reporters/html.js'][52] = 0;
  _$jscoverage['reporters/html.js'][55] = 0;
  _$jscoverage['reporters/html.js'][57] = 0;
  _$jscoverage['reporters/html.js'][59] = 0;
  _$jscoverage['reporters/html.js'][60] = 0;
  _$jscoverage['reporters/html.js'][63] = 0;
  _$jscoverage['reporters/html.js'][66] = 0;
  _$jscoverage['reporters/html.js'][67] = 0;
  _$jscoverage['reporters/html.js'][68] = 0;
  _$jscoverage['reporters/html.js'][71] = 0;
  _$jscoverage['reporters/html.js'][72] = 0;
  _$jscoverage['reporters/html.js'][73] = 0;
  _$jscoverage['reporters/html.js'][76] = 0;
  _$jscoverage['reporters/html.js'][77] = 0;
  _$jscoverage['reporters/html.js'][80] = 0;
  _$jscoverage['reporters/html.js'][82] = 0;
  _$jscoverage['reporters/html.js'][84] = 0;
  _$jscoverage['reporters/html.js'][85] = 0;
  _$jscoverage['reporters/html.js'][89] = 0;
  _$jscoverage['reporters/html.js'][90] = 0;
  _$jscoverage['reporters/html.js'][91] = 0;
  _$jscoverage['reporters/html.js'][92] = 0;
  _$jscoverage['reporters/html.js'][95] = 0;
  _$jscoverage['reporters/html.js'][96] = 0;
  _$jscoverage['reporters/html.js'][97] = 0;
  _$jscoverage['reporters/html.js'][98] = 0;
  _$jscoverage['reporters/html.js'][100] = 0;
  _$jscoverage['reporters/html.js'][101] = 0;
  _$jscoverage['reporters/html.js'][105] = 0;
  _$jscoverage['reporters/html.js'][107] = 0;
  _$jscoverage['reporters/html.js'][111] = 0;
  _$jscoverage['reporters/html.js'][112] = 0;
  _$jscoverage['reporters/html.js'][114] = 0;
  _$jscoverage['reporters/html.js'][119] = 0;
  _$jscoverage['reporters/html.js'][120] = 0;
  _$jscoverage['reporters/html.js'][121] = 0;
  _$jscoverage['reporters/html.js'][122] = 0;
  _$jscoverage['reporters/html.js'][124] = 0;
  _$jscoverage['reporters/html.js'][132] = 0;
  _$jscoverage['reporters/html.js'][133] = 0;
  _$jscoverage['reporters/html.js'][141] = 0;
  _$jscoverage['reporters/html.js'][142] = 0;
  _$jscoverage['reporters/html.js'][146] = 0;
  _$jscoverage['reporters/html.js'][149] = 0;
  _$jscoverage['reporters/html.js'][153] = 0;
}
_$jscoverage['reporters/html.js'][6]++;
var Base = require("./base"), utils = require("../utils"), Progress = require("../browser/progress"), escape = utils.escape;
_$jscoverage['reporters/html.js'][15]++;
exports = module.exports = HTML;
_$jscoverage['reporters/html.js'][21]++;
var statsTemplate = "<ul id=\"stats\"><li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li><li class=\"passes\">passes: <em>0</em></li><li class=\"failures\">failures: <em>0</em></li><li class=\"duration\">duration: <em>0</em>s</li></ul>";
_$jscoverage['reporters/html.js'][35]++;
function HTML(runner) {
  _$jscoverage['reporters/html.js'][36]++;
  Base.call(this, runner);
  _$jscoverage['reporters/html.js'][40]++;
  var self = this, stats = this.stats, total = runner.total, root = $("#mocha"), stack = [root], stat = $(statsTemplate).appendTo(root), canvas = stat.find("canvas").get(0), progress, ctx;
  _$jscoverage['reporters/html.js'][50]++;
  if (canvas.getContext) {
    _$jscoverage['reporters/html.js'][51]++;
    ctx = canvas.getContext("2d");
    _$jscoverage['reporters/html.js'][52]++;
    progress = new Progress();
  }
  _$jscoverage['reporters/html.js'][55]++;
  if (! root.length) {
    _$jscoverage['reporters/html.js'][55]++;
    return error("#mocha div missing, add it to your document");
  }
  _$jscoverage['reporters/html.js'][57]++;
  if (progress) {
    _$jscoverage['reporters/html.js'][57]++;
    progress.size(40);
  }
  _$jscoverage['reporters/html.js'][59]++;
  runner.on("suite", (function (suite) {
  _$jscoverage['reporters/html.js'][60]++;
  if (suite.root) {
    _$jscoverage['reporters/html.js'][60]++;
    return;
  }
  _$jscoverage['reporters/html.js'][63]++;
  var el = $("<div class=\"suite\"><h1>" + suite.title + "</h1></div>");
  _$jscoverage['reporters/html.js'][66]++;
  stack[0].append(el);
  _$jscoverage['reporters/html.js'][67]++;
  stack.unshift($("<div>"));
  _$jscoverage['reporters/html.js'][68]++;
  el.append(stack[0]);
}));
  _$jscoverage['reporters/html.js'][71]++;
  runner.on("suite end", (function (suite) {
  _$jscoverage['reporters/html.js'][72]++;
  if (suite.root) {
    _$jscoverage['reporters/html.js'][72]++;
    return;
  }
  _$jscoverage['reporters/html.js'][73]++;
  stack.shift();
}));
  _$jscoverage['reporters/html.js'][76]++;
  runner.on("fail", (function (test, err) {
  _$jscoverage['reporters/html.js'][77]++;
  if (err.uncaught) {
    _$jscoverage['reporters/html.js'][77]++;
    runner.emit("test end", test);
  }
}));
  _$jscoverage['reporters/html.js'][80]++;
  runner.on("test end", (function (test) {
  _$jscoverage['reporters/html.js'][82]++;
  var percent = stats.tests / total * 100 | 0;
  _$jscoverage['reporters/html.js'][84]++;
  if (progress) {
    _$jscoverage['reporters/html.js'][85]++;
    progress.update(percent).draw(ctx);
  }
  _$jscoverage['reporters/html.js'][89]++;
  var ms = new Date() - stats.start;
  _$jscoverage['reporters/html.js'][90]++;
  stat.find(".passes em").text(stats.passes);
  _$jscoverage['reporters/html.js'][91]++;
  stat.find(".failures em").text(stats.failures);
  _$jscoverage['reporters/html.js'][92]++;
  stat.find(".duration em").text((ms / 1000).toFixed(2));
  _$jscoverage['reporters/html.js'][95]++;
  if ("passed" == test.state) {
    _$jscoverage['reporters/html.js'][96]++;
    var el = $("<div class=\"test pass\"><h2>" + escape(test.title) + "</h2></div>");
  }
  else {
    _$jscoverage['reporters/html.js'][97]++;
    if (test.pending) {
      _$jscoverage['reporters/html.js'][98]++;
      var el = $("<div class=\"test pass pending\"><h2>" + escape(test.title) + "</h2></div>");
    }
    else {
      _$jscoverage['reporters/html.js'][100]++;
      var el = $("<div class=\"test fail\"><h2>" + escape(test.title) + "</h2></div>");
      _$jscoverage['reporters/html.js'][101]++;
      var str = test.err.stack || test.err;
      _$jscoverage['reporters/html.js'][105]++;
      if ("[object Error]" == str) {
        _$jscoverage['reporters/html.js'][105]++;
        str = test.err.message;
      }
      _$jscoverage['reporters/html.js'][107]++;
      $("<pre class=\"error\">" + escape(str) + "</pre>").appendTo(el);
    }
  }
  _$jscoverage['reporters/html.js'][111]++;
  el.find("h2").toggle((function () {
  _$jscoverage['reporters/html.js'][112]++;
  pre && pre.slideDown("fast");
}), (function () {
  _$jscoverage['reporters/html.js'][114]++;
  pre && pre.slideUp("fast");
}));
  _$jscoverage['reporters/html.js'][119]++;
  if (! test.pending) {
    _$jscoverage['reporters/html.js'][120]++;
    var code = escape(clean(test.fn.toString()));
    _$jscoverage['reporters/html.js'][121]++;
    var pre = $("<pre><code>" + code + "</code></pre>");
    _$jscoverage['reporters/html.js'][122]++;
    pre.appendTo(el).hide();
  }
  _$jscoverage['reporters/html.js'][124]++;
  stack[0].append(el);
}));
}
_$jscoverage['reporters/html.js'][132]++;
function error(msg) {
  _$jscoverage['reporters/html.js'][133]++;
  $("<div id=\"error\">" + msg + "</div>").appendTo("body");
}
_$jscoverage['reporters/html.js'][141]++;
function clean(str) {
  _$jscoverage['reporters/html.js'][142]++;
  str = str.replace(/^function *\(.*\) *{/, "").replace(/\s+\}$/, "");
  _$jscoverage['reporters/html.js'][146]++;
  var spaces = str.match(/^\n?( *)/)[1].length, re = new RegExp("^ {" + spaces + "}", "gm");
  _$jscoverage['reporters/html.js'][149]++;
  str = str.replace(re, "").replace(/^\s+/, "");
  _$jscoverage['reporters/html.js'][153]++;
  return str;
}
_$jscoverage['reporters/html.js'].source = ["","/**"," * Module dependencies."," */","","var Base = require('./base')","  , utils = require('../utils')","  , Progress = require('../browser/progress')","  , escape = utils.escape;","","/**"," * Expose `Doc`."," */","","exports = module.exports = HTML;","","/**"," * Stats template."," */","","var statsTemplate = '&lt;ul id=\"stats\"&gt;'","  + '&lt;li class=\"progress\"&gt;&lt;canvas width=\"40\" height=\"40\"&gt;&lt;/canvas&gt;&lt;/li&gt;'","  + '&lt;li class=\"passes\"&gt;passes: &lt;em&gt;0&lt;/em&gt;&lt;/li&gt;'","  + '&lt;li class=\"failures\"&gt;failures: &lt;em&gt;0&lt;/em&gt;&lt;/li&gt;'","  + '&lt;li class=\"duration\"&gt;duration: &lt;em&gt;0&lt;/em&gt;s&lt;/li&gt;'","  + '&lt;/ul&gt;';","","/**"," * Initialize a new `Doc` reporter."," *"," * @param {Runner} runner"," * @api public"," */","","function HTML(runner) {","  Base.call(this, runner);","","  // TODO: clean up","","  var self = this","    , stats = this.stats","    , total = runner.total","    , root = $('#mocha')","    , stack = [root]","    , stat = $(statsTemplate).appendTo(root)","    , canvas = stat.find('canvas').get(0)","    , progress","    , ctx","","  if (canvas.getContext) {","    ctx = canvas.getContext('2d');","    progress = new Progress;","  }","","  if (!root.length) return error('#mocha div missing, add it to your document');","","  if (progress) progress.size(40);","","  runner.on('suite', function(suite){","    if (suite.root) return;","","    // suite","    var el = $('&lt;div class=\"suite\"&gt;&lt;h1&gt;' + suite.title + '&lt;/h1&gt;&lt;/div&gt;');","","    // container","    stack[0].append(el);","    stack.unshift($('&lt;div&gt;'));","    el.append(stack[0]);","  });","","  runner.on('suite end', function(suite){","    if (suite.root) return;","    stack.shift();","  });","","  runner.on('fail', function(test, err){","    if (err.uncaught) runner.emit('test end', test);","  });","","  runner.on('test end', function(test){","    // TODO: add to stats","    var percent = stats.tests / total * 100 | 0;","","    if (progress) {","      progress.update(percent).draw(ctx);","    }","","    // update stats","    var ms = new Date - stats.start;","    stat.find('.passes em').text(stats.passes);","    stat.find('.failures em').text(stats.failures);","    stat.find('.duration em').text((ms / 1000).toFixed(2));","","    // test","    if ('passed' == test.state) {","      var el = $('&lt;div class=\"test pass\"&gt;&lt;h2&gt;' + escape(test.title) + '&lt;/h2&gt;&lt;/div&gt;')","    } else if (test.pending) {","      var el = $('&lt;div class=\"test pass pending\"&gt;&lt;h2&gt;' + escape(test.title) + '&lt;/h2&gt;&lt;/div&gt;')","    } else {","      var el = $('&lt;div class=\"test fail\"&gt;&lt;h2&gt;' + escape(test.title) + '&lt;/h2&gt;&lt;/div&gt;');","      var str = test.err.stack || test.err;","","      // &lt;=IE7 stringifies to [Object Error]. Since it can be overloaded, we","      // check for the result of the stringifying.","      if ('[object Error]' == str) str = test.err.message;","","      $('&lt;pre class=\"error\"&gt;' + escape(str) + '&lt;/pre&gt;').appendTo(el);","    }","","    // toggle code","    el.find('h2').toggle(function(){","      pre &amp;&amp; pre.slideDown('fast');","    }, function(){","      pre &amp;&amp; pre.slideUp('fast');","    });","","    // code","    // TODO: defer","    if (!test.pending) {","      var code = escape(clean(test.fn.toString()));","      var pre = $('&lt;pre&gt;&lt;code&gt;' + code + '&lt;/code&gt;&lt;/pre&gt;');","      pre.appendTo(el).hide();","    }","    stack[0].append(el);","  });","}","","/**"," * Display error `msg`."," */","","function error(msg) {","  $('&lt;div id=\"error\"&gt;' + msg + '&lt;/div&gt;').appendTo('body');","}","","/**"," * Strip the function definition from `str`,"," * and re-indent for pre whitespace."," */","","function clean(str) {","  str = str","    .replace(/^function *\\(.*\\) *{/, '')","    .replace(/\\s+\\}$/, '');","","  var spaces = str.match(/^\\n?( *)/)[1].length","    , re = new RegExp('^ {' + spaces + '}', 'gm');","","  str = str","    .replace(re, '')","    .replace(/^\\s+/, '');","","  return str;","}"];
