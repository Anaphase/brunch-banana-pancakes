/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['reporters/json-stream.js']) {
  _$jscoverage['reporters/json-stream.js'] = [];
  _$jscoverage['reporters/json-stream.js'][6] = 0;
  _$jscoverage['reporters/json-stream.js'][13] = 0;
  _$jscoverage['reporters/json-stream.js'][22] = 0;
  _$jscoverage['reporters/json-stream.js'][23] = 0;
  _$jscoverage['reporters/json-stream.js'][25] = 0;
  _$jscoverage['reporters/json-stream.js'][29] = 0;
  _$jscoverage['reporters/json-stream.js'][30] = 0;
  _$jscoverage['reporters/json-stream.js'][33] = 0;
  _$jscoverage['reporters/json-stream.js'][34] = 0;
  _$jscoverage['reporters/json-stream.js'][37] = 0;
  _$jscoverage['reporters/json-stream.js'][38] = 0;
  _$jscoverage['reporters/json-stream.js'][41] = 0;
  _$jscoverage['reporters/json-stream.js'][42] = 0;
  _$jscoverage['reporters/json-stream.js'][55] = 0;
  _$jscoverage['reporters/json-stream.js'][56] = 0;
}
_$jscoverage['reporters/json-stream.js'][6]++;
var Base = require("./base"), color = Base.color;
_$jscoverage['reporters/json-stream.js'][13]++;
exports = module.exports = List;
_$jscoverage['reporters/json-stream.js'][22]++;
function List(runner) {
  _$jscoverage['reporters/json-stream.js'][23]++;
  Base.call(this, runner);
  _$jscoverage['reporters/json-stream.js'][25]++;
  var self = this, stats = this.stats, total = runner.total;
  _$jscoverage['reporters/json-stream.js'][29]++;
  runner.on("start", (function () {
  _$jscoverage['reporters/json-stream.js'][30]++;
  console.log(JSON.stringify(["start", {total: total}]));
}));
  _$jscoverage['reporters/json-stream.js'][33]++;
  runner.on("pass", (function (test) {
  _$jscoverage['reporters/json-stream.js'][34]++;
  console.log(JSON.stringify(["pass", clean(test)]));
}));
  _$jscoverage['reporters/json-stream.js'][37]++;
  runner.on("fail", (function (test, err) {
  _$jscoverage['reporters/json-stream.js'][38]++;
  console.log(JSON.stringify(["fail", clean(test)]));
}));
  _$jscoverage['reporters/json-stream.js'][41]++;
  runner.on("end", (function () {
  _$jscoverage['reporters/json-stream.js'][42]++;
  process.stdout.write(JSON.stringify(["end", self.stats]));
}));
}
_$jscoverage['reporters/json-stream.js'][55]++;
function clean(test) {
  _$jscoverage['reporters/json-stream.js'][56]++;
  return ({title: test.title, fullTitle: test.fullTitle(), duration: test.duration});
}
_$jscoverage['reporters/json-stream.js'].source = ["","/**"," * Module dependencies."," */","","var Base = require('./base')","  , color = Base.color;","","/**"," * Expose `List`."," */","","exports = module.exports = List;","","/**"," * Initialize a new `List` test reporter."," *"," * @param {Runner} runner"," * @api public"," */","","function List(runner) {","  Base.call(this, runner);","","  var self = this","    , stats = this.stats","    , total = runner.total;","","  runner.on('start', function(){","    console.log(JSON.stringify(['start', { total: total }]));","  });","","  runner.on('pass', function(test){","    console.log(JSON.stringify(['pass', clean(test)]));","  });","","  runner.on('fail', function(test, err){","    console.log(JSON.stringify(['fail', clean(test)]));","  });","","  runner.on('end', function(){","    process.stdout.write(JSON.stringify(['end', self.stats]));","  });","}","","/**"," * Return a plain-object representation of `test`"," * free of cyclic properties etc."," *"," * @param {Object} test"," * @return {Object}"," * @api private"," */","","function clean(test) {","  return {","      title: test.title","    , fullTitle: test.fullTitle()","    , duration: test.duration","  }","}"];
