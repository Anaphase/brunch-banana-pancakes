/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['reporters/base.js']) {
  _$jscoverage['reporters/base.js'] = [];
  _$jscoverage['reporters/base.js'][6] = 0;
  _$jscoverage['reporters/base.js'][12] = 0;
  _$jscoverage['reporters/base.js'][18] = 0;
  _$jscoverage['reporters/base.js'][24] = 0;
  _$jscoverage['reporters/base.js'][30] = 0;
  _$jscoverage['reporters/base.js'][61] = 0;
  _$jscoverage['reporters/base.js'][62] = 0;
  _$jscoverage['reporters/base.js'][63] = 0;
  _$jscoverage['reporters/base.js'][71] = 0;
  _$jscoverage['reporters/base.js'][84] = 0;
  _$jscoverage['reporters/base.js'][86] = 0;
  _$jscoverage['reporters/base.js'][90] = 0;
  _$jscoverage['reporters/base.js'][94] = 0;
  _$jscoverage['reporters/base.js'][98] = 0;
  _$jscoverage['reporters/base.js'][102] = 0;
  _$jscoverage['reporters/base.js'][103] = 0;
  _$jscoverage['reporters/base.js'][112] = 0;
  _$jscoverage['reporters/base.js'][121] = 0;
  _$jscoverage['reporters/base.js'][122] = 0;
  _$jscoverage['reporters/base.js'][123] = 0;
  _$jscoverage['reporters/base.js'][125] = 0;
  _$jscoverage['reporters/base.js'][130] = 0;
  _$jscoverage['reporters/base.js'][137] = 0;
  _$jscoverage['reporters/base.js'][140] = 0;
  _$jscoverage['reporters/base.js'][156] = 0;
  _$jscoverage['reporters/base.js'][157] = 0;
  _$jscoverage['reporters/base.js'][161] = 0;
  _$jscoverage['reporters/base.js'][162] = 0;
  _$jscoverage['reporters/base.js'][164] = 0;
  _$jscoverage['reporters/base.js'][165] = 0;
  _$jscoverage['reporters/base.js'][168] = 0;
  _$jscoverage['reporters/base.js'][169] = 0;
  _$jscoverage['reporters/base.js'][170] = 0;
  _$jscoverage['reporters/base.js'][173] = 0;
  _$jscoverage['reporters/base.js'][174] = 0;
  _$jscoverage['reporters/base.js'][175] = 0;
  _$jscoverage['reporters/base.js'][178] = 0;
  _$jscoverage['reporters/base.js'][179] = 0;
  _$jscoverage['reporters/base.js'][181] = 0;
  _$jscoverage['reporters/base.js'][182] = 0;
  _$jscoverage['reporters/base.js'][188] = 0;
  _$jscoverage['reporters/base.js'][191] = 0;
  _$jscoverage['reporters/base.js'][192] = 0;
  _$jscoverage['reporters/base.js'][193] = 0;
  _$jscoverage['reporters/base.js'][194] = 0;
  _$jscoverage['reporters/base.js'][195] = 0;
  _$jscoverage['reporters/base.js'][198] = 0;
  _$jscoverage['reporters/base.js'][199] = 0;
  _$jscoverage['reporters/base.js'][200] = 0;
  _$jscoverage['reporters/base.js'][211] = 0;
  _$jscoverage['reporters/base.js'][212] = 0;
  _$jscoverage['reporters/base.js'][215] = 0;
  _$jscoverage['reporters/base.js'][218] = 0;
  _$jscoverage['reporters/base.js'][219] = 0;
  _$jscoverage['reporters/base.js'][223] = 0;
  _$jscoverage['reporters/base.js'][224] = 0;
  _$jscoverage['reporters/base.js'][225] = 0;
  _$jscoverage['reporters/base.js'][226] = 0;
  _$jscoverage['reporters/base.js'][230] = 0;
  _$jscoverage['reporters/base.js'][234] = 0;
  _$jscoverage['reporters/base.js'][235] = 0;
}
_$jscoverage['reporters/base.js'][6]++;
var tty = require("tty");
_$jscoverage['reporters/base.js'][12]++;
var isatty = tty.isatty(1) && tty.isatty(2);
_$jscoverage['reporters/base.js'][18]++;
exports = module.exports = Base;
_$jscoverage['reporters/base.js'][24]++;
exports.useColors = isatty;
_$jscoverage['reporters/base.js'][30]++;
exports.colors = {"pass": 90, "fail": 31, "bright pass": 92, "bright fail": 91, "bright yellow": 93, "pending": 36, "suite": 0, "error title": 0, "error message": 31, "error stack": 90, "checkmark": 32, "fast": 90, "medium": 33, "slow": 31, "green": 32, "light": 90};
_$jscoverage['reporters/base.js'][61]++;
var color = exports.color = (function (type, str) {
  _$jscoverage['reporters/base.js'][62]++;
  if (! exports.useColors) {
    _$jscoverage['reporters/base.js'][62]++;
    return str;
  }
  _$jscoverage['reporters/base.js'][63]++;
  return "\u001b[" + exports.colors[type] + "m" + str + "\u001b[0m";
});
_$jscoverage['reporters/base.js'][71]++;
exports.window = {width: isatty? process.stdout.getWindowSize? process.stdout.getWindowSize(1)[0]: tty.getWindowSize()[1]: 75};
_$jscoverage['reporters/base.js'][84]++;
exports.cursor = {hide: (function () {
  _$jscoverage['reporters/base.js'][86]++;
  process.stdout.write("\u001b[?25l");
}), show: (function () {
  _$jscoverage['reporters/base.js'][90]++;
  process.stdout.write("\u001b[?25h");
}), deleteLine: (function () {
  _$jscoverage['reporters/base.js'][94]++;
  process.stdout.write("\u001b[2K");
}), beginningOfLine: (function () {
  _$jscoverage['reporters/base.js'][98]++;
  process.stdout.write("\u001b[0G");
}), CR: (function () {
  _$jscoverage['reporters/base.js'][102]++;
  exports.cursor.deleteLine();
  _$jscoverage['reporters/base.js'][103]++;
  exports.cursor.beginningOfLine();
})};
_$jscoverage['reporters/base.js'][112]++;
exports.slow = 75;
_$jscoverage['reporters/base.js'][121]++;
exports.list = (function (failures) {
  _$jscoverage['reporters/base.js'][122]++;
  console.error();
  _$jscoverage['reporters/base.js'][123]++;
  failures.forEach((function (test, i) {
  _$jscoverage['reporters/base.js'][125]++;
  var fmt = color("error title", "  %s) %s:\n") + color("error message", "     %s") + color("error stack", "\n%s\n");
  _$jscoverage['reporters/base.js'][130]++;
  var err = test.err, message = err.message || "", stack = err.stack || message, index = stack.indexOf(message) + message.length, msg = stack.slice(0, index);
  _$jscoverage['reporters/base.js'][137]++;
  stack = stack.slice(index + 1).replace(/^/gm, "  ");
  _$jscoverage['reporters/base.js'][140]++;
  console.error(fmt, (i + 1), test.fullTitle(), msg, stack);
}));
});
_$jscoverage['reporters/base.js'][156]++;
function Base(runner) {
  _$jscoverage['reporters/base.js'][157]++;
  var self = this, stats = this.stats = {suites: 0, tests: 0, passes: 0, failures: 0}, failures = this.failures = [];
  _$jscoverage['reporters/base.js'][161]++;
  if (! runner) {
    _$jscoverage['reporters/base.js'][161]++;
    return;
  }
  _$jscoverage['reporters/base.js'][162]++;
  this.runner = runner;
  _$jscoverage['reporters/base.js'][164]++;
  runner.on("start", (function () {
  _$jscoverage['reporters/base.js'][165]++;
  stats.start = new Date();
}));
  _$jscoverage['reporters/base.js'][168]++;
  runner.on("suite", (function (suite) {
  _$jscoverage['reporters/base.js'][169]++;
  stats.suites = stats.suites || 0;
  _$jscoverage['reporters/base.js'][170]++;
  suite.root || stats.suites++;
}));
  _$jscoverage['reporters/base.js'][173]++;
  runner.on("test end", (function (test) {
  _$jscoverage['reporters/base.js'][174]++;
  stats.tests = stats.tests || 0;
  _$jscoverage['reporters/base.js'][175]++;
  stats.tests++;
}));
  _$jscoverage['reporters/base.js'][178]++;
  runner.on("pass", (function (test) {
  _$jscoverage['reporters/base.js'][179]++;
  stats.passes = stats.passes || 0;
  _$jscoverage['reporters/base.js'][181]++;
  var medium = exports.slow / 2;
  _$jscoverage['reporters/base.js'][182]++;
  test.speed = test.duration > exports.slow? "slow": test.duration > medium? "medium": "fast";
  _$jscoverage['reporters/base.js'][188]++;
  stats.passes++;
}));
  _$jscoverage['reporters/base.js'][191]++;
  runner.on("fail", (function (test, err) {
  _$jscoverage['reporters/base.js'][192]++;
  stats.failures = stats.failures || 0;
  _$jscoverage['reporters/base.js'][193]++;
  stats.failures++;
  _$jscoverage['reporters/base.js'][194]++;
  test.err = err;
  _$jscoverage['reporters/base.js'][195]++;
  failures.push(test);
}));
  _$jscoverage['reporters/base.js'][198]++;
  runner.on("end", (function () {
  _$jscoverage['reporters/base.js'][199]++;
  stats.end = new Date();
  _$jscoverage['reporters/base.js'][200]++;
  stats.duration = new Date() - stats.start;
}));
}
_$jscoverage['reporters/base.js'][211]++;
Base.prototype.epilogue = (function () {
  _$jscoverage['reporters/base.js'][212]++;
  var stats = this.stats, fmt;
  _$jscoverage['reporters/base.js'][215]++;
  console.log();
  _$jscoverage['reporters/base.js'][218]++;
  if (stats.failures) {
    _$jscoverage['reporters/base.js'][219]++;
    fmt = color("bright fail", "  \u00e2\u009c\u0096") + color("fail", " %d of %d tests failed") + color("light", ":");
    _$jscoverage['reporters/base.js'][223]++;
    console.error(fmt, stats.failures, this.runner.total);
    _$jscoverage['reporters/base.js'][224]++;
    Base.list(this.failures);
    _$jscoverage['reporters/base.js'][225]++;
    console.error();
    _$jscoverage['reporters/base.js'][226]++;
    return;
  }
  _$jscoverage['reporters/base.js'][230]++;
  fmt = color("bright pass", "  \u00e2\u009c\u0094") + color("green", " %d tests complete") + color("light", " (%dms)");
  _$jscoverage['reporters/base.js'][234]++;
  console.log(fmt, stats.tests || 0, stats.duration);
  _$jscoverage['reporters/base.js'][235]++;
  console.log();
});
_$jscoverage['reporters/base.js'].source = ["","/**"," * Module dependencies."," */","","var tty = require('tty');","","/**"," * Check if both stdio streams are associated with a tty."," */","","var isatty = tty.isatty(1) &amp;&amp; tty.isatty(2);","","/**"," * Expose `Base`."," */","","exports = module.exports = Base;","","/**"," * Enable coloring by default."," */","","exports.useColors = isatty;","","/**"," * Default color map."," */","","exports.colors = {","    'pass': 90","  , 'fail': 31","  , 'bright pass': 92","  , 'bright fail': 91","  , 'bright yellow': 93","  , 'pending': 36","  , 'suite': 0","  , 'error title': 0","  , 'error message': 31","  , 'error stack': 90","  , 'checkmark': 32","  , 'fast': 90","  , 'medium': 33","  , 'slow': 31","  , 'green': 32","  , 'light': 90","};","","/**"," * Color `str` with the given `type`,"," * allowing colors to be disabled,"," * as well as user-defined color"," * schemes."," *"," * @param {String} type"," * @param {String} str"," * @return {String}"," * @api private"," */","","var color = exports.color = function(type, str) {","  if (!exports.useColors) return str;","  return '\\033[' + exports.colors[type] + 'm' + str + '\\033[0m';","};","","/**"," * Expose term window size, with some"," * defaults for when stderr is not a tty."," */","","exports.window = {","  width: isatty","    ? process.stdout.getWindowSize","      ? process.stdout.getWindowSize(1)[0]","      : tty.getWindowSize()[1]","    : 75","};","","/**"," * Expose some basic cursor interactions"," * that are common among reporters."," */","","exports.cursor = {","  hide: function(){","    process.stdout.write('\\033[?25l');","  },","","  show: function(){","    process.stdout.write('\\033[?25h');","  },","","  deleteLine: function(){","    process.stdout.write('\\033[2K');","  },","","  beginningOfLine: function(){","    process.stdout.write('\\033[0G');","  },","","  CR: function(){","    exports.cursor.deleteLine();","    exports.cursor.beginningOfLine();","  }","};","","/**"," * A test is considered slow if it"," * exceeds the following value in milliseconds."," */","","exports.slow = 75;","","/**"," * Outut the given `failures` as a list."," *"," * @param {Array} failures"," * @api public"," */","","exports.list = function(failures){","  console.error();","  failures.forEach(function(test, i){","    // format","    var fmt = color('error title', '  %s) %s:\\n')","      + color('error message', '     %s')","      + color('error stack', '\\n%s\\n');","","    // msg","    var err = test.err","      , message = err.message || ''","      , stack = err.stack || message","      , index = stack.indexOf(message) + message.length","      , msg = stack.slice(0, index);","","    // indent stack trace without msg","    stack = stack.slice(index + 1)","      .replace(/^/gm, '  ');","","    console.error(fmt, (i + 1), test.fullTitle(), msg, stack);","  });","};","","/**"," * Initialize a new `Base` reporter."," *"," * All other reporters generally"," * inherit from this reporter, providing"," * stats such as test duration, number"," * of tests passed / failed etc."," *"," * @param {Runner} runner"," * @api public"," */","","function Base(runner) {","  var self = this","    , stats = this.stats = { suites: 0, tests: 0, passes: 0, failures: 0 }","    , failures = this.failures = [];","","  if (!runner) return;","  this.runner = runner;","","  runner.on('start', function(){","    stats.start = new Date;","  });","","  runner.on('suite', function(suite){","    stats.suites = stats.suites || 0;","    suite.root || stats.suites++;","  });","","  runner.on('test end', function(test){","    stats.tests = stats.tests || 0;","    stats.tests++;","  });","","  runner.on('pass', function(test){","    stats.passes = stats.passes || 0;","","    var medium = exports.slow / 2;","    test.speed = test.duration &gt; exports.slow","      ? 'slow'","      : test.duration &gt; medium","        ? 'medium'","        : 'fast';","","    stats.passes++;","  });","","  runner.on('fail', function(test, err){","    stats.failures = stats.failures || 0;","    stats.failures++;","    test.err = err;","    failures.push(test);","  });","","  runner.on('end', function(){","    stats.end = new Date;","    stats.duration = new Date - stats.start;","  });","}","","/**"," * Output common epilogue used by many of"," * the bundled reporters."," *"," * @api public"," */","","Base.prototype.epilogue = function(){","  var stats = this.stats","    , fmt;","","  console.log();","","  // failure","  if (stats.failures) {","    fmt = color('bright fail', '  &#226;&#156;&#150;')","      + color('fail', ' %d of %d tests failed')","      + color('light', ':')","","    console.error(fmt, stats.failures, this.runner.total);","    Base.list(this.failures);","    console.error();","    return;","  }","","  // pass","  fmt = color('bright pass', '  &#226;&#156;&#148;')","    + color('green', ' %d tests complete')","    + color('light', ' (%dms)');","","  console.log(fmt, stats.tests || 0, stats.duration);","  console.log();","};"];
