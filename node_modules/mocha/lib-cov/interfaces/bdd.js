/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['interfaces/bdd.js']) {
  _$jscoverage['interfaces/bdd.js'] = [];
  _$jscoverage['interfaces/bdd.js'][6] = 0;
  _$jscoverage['interfaces/bdd.js'][26] = 0;
  _$jscoverage['interfaces/bdd.js'][27] = 0;
  _$jscoverage['interfaces/bdd.js'][29] = 0;
  _$jscoverage['interfaces/bdd.js'][33] = 0;
  _$jscoverage['interfaces/bdd.js'][34] = 0;
  _$jscoverage['interfaces/bdd.js'][40] = 0;
  _$jscoverage['interfaces/bdd.js'][41] = 0;
  _$jscoverage['interfaces/bdd.js'][48] = 0;
  _$jscoverage['interfaces/bdd.js'][49] = 0;
  _$jscoverage['interfaces/bdd.js'][56] = 0;
  _$jscoverage['interfaces/bdd.js'][57] = 0;
  _$jscoverage['interfaces/bdd.js'][64] = 0;
  _$jscoverage['interfaces/bdd.js'][65] = 0;
  _$jscoverage['interfaces/bdd.js'][74] = 0;
  _$jscoverage['interfaces/bdd.js'][75] = 0;
  _$jscoverage['interfaces/bdd.js'][76] = 0;
  _$jscoverage['interfaces/bdd.js'][77] = 0;
  _$jscoverage['interfaces/bdd.js'][78] = 0;
  _$jscoverage['interfaces/bdd.js'][87] = 0;
  _$jscoverage['interfaces/bdd.js'][88] = 0;
}
_$jscoverage['interfaces/bdd.js'][6]++;
var Suite = require("../suite"), Test = require("../test");
_$jscoverage['interfaces/bdd.js'][26]++;
module.exports = (function (suite) {
  _$jscoverage['interfaces/bdd.js'][27]++;
  var suites = [suite];
  _$jscoverage['interfaces/bdd.js'][29]++;
  suite.on("pre-require", (function (context) {
  _$jscoverage['interfaces/bdd.js'][33]++;
  context.xdescribe = (function () {
});
  _$jscoverage['interfaces/bdd.js'][34]++;
  context.xit = (function () {
});
  _$jscoverage['interfaces/bdd.js'][40]++;
  context.before = (function (fn) {
  _$jscoverage['interfaces/bdd.js'][41]++;
  suites[0].beforeAll(fn);
});
  _$jscoverage['interfaces/bdd.js'][48]++;
  context.after = (function (fn) {
  _$jscoverage['interfaces/bdd.js'][49]++;
  suites[0].afterAll(fn);
});
  _$jscoverage['interfaces/bdd.js'][56]++;
  context.beforeEach = (function (fn) {
  _$jscoverage['interfaces/bdd.js'][57]++;
  suites[0].beforeEach(fn);
});
  _$jscoverage['interfaces/bdd.js'][64]++;
  context.afterEach = (function (fn) {
  _$jscoverage['interfaces/bdd.js'][65]++;
  suites[0].afterEach(fn);
});
  _$jscoverage['interfaces/bdd.js'][74]++;
  context.describe = (function (title, fn) {
  _$jscoverage['interfaces/bdd.js'][75]++;
  var suite = Suite.create(suites[0], title);
  _$jscoverage['interfaces/bdd.js'][76]++;
  suites.unshift(suite);
  _$jscoverage['interfaces/bdd.js'][77]++;
  fn();
  _$jscoverage['interfaces/bdd.js'][78]++;
  suites.shift();
});
  _$jscoverage['interfaces/bdd.js'][87]++;
  context.it = (function (title, fn) {
  _$jscoverage['interfaces/bdd.js'][88]++;
  suites[0].addTest(new Test(title, fn));
});
}));
});
_$jscoverage['interfaces/bdd.js'].source = ["","/**"," * Module dependencies."," */","","var Suite = require('../suite')","  , Test = require('../test');","","/**"," * BDD-style interface:"," * "," *      describe('Array', function(){"," *        describe('#indexOf()', function(){"," *          it('should return -1 when not present', function(){"," *"," *          });"," *"," *          it('should return the index when present', function(){"," *"," *          });"," *        });"," *      });"," * "," */","","module.exports = function(suite){","  var suites = [suite];","","  suite.on('pre-require', function(context){","","    // noop variants","","    context.xdescribe = function(){};","    context.xit = function(){};","","    /**","     * Execute before running tests.","     */","","    context.before = function(fn){","      suites[0].beforeAll(fn);","    };","","    /**","     * Execute after running tests.","     */","","    context.after = function(fn){","      suites[0].afterAll(fn);","    };","","    /**","     * Execute before each test case.","     */","","    context.beforeEach = function(fn){","      suites[0].beforeEach(fn);","    };","","    /**","     * Execute after each test case.","     */","","    context.afterEach = function(fn){","      suites[0].afterEach(fn);","    };","","    /**","     * Describe a \"suite\" with the given `title`","     * and callback `fn` containing nested suites","     * and/or tests.","     */","  ","    context.describe = function(title, fn){","      var suite = Suite.create(suites[0], title);","      suites.unshift(suite);","      fn();","      suites.shift();","    };","","    /**","     * Describe a specification or test-case","     * with the given `title` and callback `fn`","     * acting as a thunk.","     */","","    context.it = function(title, fn){","      suites[0].addTest(new Test(title, fn));","    };","  });","};"];
