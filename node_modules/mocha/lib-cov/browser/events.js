/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['browser/events.js']) {
  _$jscoverage['browser/events.js'] = [];
  _$jscoverage['browser/events.js'][6] = 0;
  _$jscoverage['browser/events.js'][12] = 0;
  _$jscoverage['browser/events.js'][13] = 0;
  _$jscoverage['browser/events.js'][22] = 0;
  _$jscoverage['browser/events.js'][30] = 0;
  _$jscoverage['browser/events.js'][31] = 0;
  _$jscoverage['browser/events.js'][32] = 0;
  _$jscoverage['browser/events.js'][35] = 0;
  _$jscoverage['browser/events.js'][36] = 0;
  _$jscoverage['browser/events.js'][37] = 0;
  _$jscoverage['browser/events.js'][38] = 0;
  _$jscoverage['browser/events.js'][40] = 0;
  _$jscoverage['browser/events.js'][43] = 0;
  _$jscoverage['browser/events.js'][46] = 0;
  _$jscoverage['browser/events.js'][54] = 0;
  _$jscoverage['browser/events.js'][55] = 0;
  _$jscoverage['browser/events.js'][57] = 0;
  _$jscoverage['browser/events.js'][58] = 0;
  _$jscoverage['browser/events.js'][59] = 0;
  _$jscoverage['browser/events.js'][60] = 0;
  _$jscoverage['browser/events.js'][62] = 0;
  _$jscoverage['browser/events.js'][63] = 0;
  _$jscoverage['browser/events.js'][65] = 0;
  _$jscoverage['browser/events.js'][74] = 0;
  _$jscoverage['browser/events.js'][75] = 0;
  _$jscoverage['browser/events.js'][76] = 0;
  _$jscoverage['browser/events.js'][78] = 0;
  _$jscoverage['browser/events.js'][79] = 0;
  _$jscoverage['browser/events.js'][81] = 0;
  _$jscoverage['browser/events.js'][82] = 0;
  _$jscoverage['browser/events.js'][83] = 0;
  _$jscoverage['browser/events.js'][84] = 0;
  _$jscoverage['browser/events.js'][88] = 0;
  _$jscoverage['browser/events.js'][89] = 0;
  _$jscoverage['browser/events.js'][92] = 0;
  _$jscoverage['browser/events.js'][94] = 0;
  _$jscoverage['browser/events.js'][95] = 0;
  _$jscoverage['browser/events.js'][97] = 0;
  _$jscoverage['browser/events.js'][98] = 0;
  _$jscoverage['browser/events.js'][102] = 0;
  _$jscoverage['browser/events.js'][111] = 0;
  _$jscoverage['browser/events.js'][112] = 0;
  _$jscoverage['browser/events.js'][113] = 0;
  _$jscoverage['browser/events.js'][114] = 0;
  _$jscoverage['browser/events.js'][117] = 0;
  _$jscoverage['browser/events.js'][118] = 0;
  _$jscoverage['browser/events.js'][121] = 0;
  _$jscoverage['browser/events.js'][130] = 0;
  _$jscoverage['browser/events.js'][131] = 0;
  _$jscoverage['browser/events.js'][132] = 0;
  _$jscoverage['browser/events.js'][135] = 0;
  _$jscoverage['browser/events.js'][136] = 0;
  _$jscoverage['browser/events.js'][139] = 0;
  _$jscoverage['browser/events.js'][140] = 0;
  _$jscoverage['browser/events.js'][143] = 0;
  _$jscoverage['browser/events.js'][152] = 0;
  _$jscoverage['browser/events.js'][153] = 0;
  _$jscoverage['browser/events.js'][154] = 0;
  _$jscoverage['browser/events.js'][157] = 0;
  _$jscoverage['browser/events.js'][159] = 0;
  _$jscoverage['browser/events.js'][160] = 0;
  _$jscoverage['browser/events.js'][163] = 0;
  _$jscoverage['browser/events.js'][165] = 0;
  _$jscoverage['browser/events.js'][166] = 0;
  _$jscoverage['browser/events.js'][167] = 0;
  _$jscoverage['browser/events.js'][168] = 0;
  _$jscoverage['browser/events.js'][170] = 0;
  _$jscoverage['browser/events.js'][171] = 0;
  _$jscoverage['browser/events.js'][174] = 0;
  _$jscoverage['browser/events.js'][177] = 0;
}
_$jscoverage['browser/events.js'][6]++;
exports.EventEmitter = EventEmitter;
_$jscoverage['browser/events.js'][12]++;
function isArray(obj) {
  _$jscoverage['browser/events.js'][13]++;
  return "[object Array]" == ({}).toString.call(obj);
}
_$jscoverage['browser/events.js'][22]++;
function EventEmitter() {
}
_$jscoverage['browser/events.js'][22]++;
;
_$jscoverage['browser/events.js'][30]++;
EventEmitter.prototype.on = (function (name, fn) {
  _$jscoverage['browser/events.js'][31]++;
  if (! this.$events) {
    _$jscoverage['browser/events.js'][32]++;
    this.$events = {};
  }
  _$jscoverage['browser/events.js'][35]++;
  if (! this.$events[name]) {
    _$jscoverage['browser/events.js'][36]++;
    this.$events[name] = fn;
  }
  else {
    _$jscoverage['browser/events.js'][37]++;
    if (isArray(this.$events[name])) {
      _$jscoverage['browser/events.js'][38]++;
      this.$events[name].push(fn);
    }
    else {
      _$jscoverage['browser/events.js'][40]++;
      this.$events[name] = [this.$events[name], fn];
    }
  }
  _$jscoverage['browser/events.js'][43]++;
  return this;
});
_$jscoverage['browser/events.js'][46]++;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;
_$jscoverage['browser/events.js'][54]++;
EventEmitter.prototype.once = (function (name, fn) {
  _$jscoverage['browser/events.js'][55]++;
  var self = this;
  _$jscoverage['browser/events.js'][57]++;
  function on() {
    _$jscoverage['browser/events.js'][58]++;
    self.removeListener(name, on);
    _$jscoverage['browser/events.js'][59]++;
    fn.apply(this, arguments);
}
  _$jscoverage['browser/events.js'][60]++;
  ;
  _$jscoverage['browser/events.js'][62]++;
  on.listener = fn;
  _$jscoverage['browser/events.js'][63]++;
  this.on(name, on);
  _$jscoverage['browser/events.js'][65]++;
  return this;
});
_$jscoverage['browser/events.js'][74]++;
EventEmitter.prototype.removeListener = (function (name, fn) {
  _$jscoverage['browser/events.js'][75]++;
  if (this.$events && this.$events[name]) {
    _$jscoverage['browser/events.js'][76]++;
    var list = this.$events[name];
    _$jscoverage['browser/events.js'][78]++;
    if (isArray(list)) {
      _$jscoverage['browser/events.js'][79]++;
      var pos = -1;
      _$jscoverage['browser/events.js'][81]++;
      for (var i = 0, l = list.length; i < l; i++) {
        _$jscoverage['browser/events.js'][82]++;
        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {
          _$jscoverage['browser/events.js'][83]++;
          pos = i;
          _$jscoverage['browser/events.js'][84]++;
          break;
        }
}
      _$jscoverage['browser/events.js'][88]++;
      if (pos < 0) {
        _$jscoverage['browser/events.js'][89]++;
        return this;
      }
      _$jscoverage['browser/events.js'][92]++;
      list.splice(pos, 1);
      _$jscoverage['browser/events.js'][94]++;
      if (! list.length) {
        _$jscoverage['browser/events.js'][95]++;
        delete this.$events[name];
      }
    }
    else {
      _$jscoverage['browser/events.js'][97]++;
      if (list === fn || (list.listener && list.listener === fn)) {
        _$jscoverage['browser/events.js'][98]++;
        delete this.$events[name];
      }
    }
  }
  _$jscoverage['browser/events.js'][102]++;
  return this;
});
_$jscoverage['browser/events.js'][111]++;
EventEmitter.prototype.removeAllListeners = (function (name) {
  _$jscoverage['browser/events.js'][112]++;
  if (name === undefined) {
    _$jscoverage['browser/events.js'][113]++;
    this.$events = {};
    _$jscoverage['browser/events.js'][114]++;
    return this;
  }
  _$jscoverage['browser/events.js'][117]++;
  if (this.$events && this.$events[name]) {
    _$jscoverage['browser/events.js'][118]++;
    this.$events[name] = null;
  }
  _$jscoverage['browser/events.js'][121]++;
  return this;
});
_$jscoverage['browser/events.js'][130]++;
EventEmitter.prototype.listeners = (function (name) {
  _$jscoverage['browser/events.js'][131]++;
  if (! this.$events) {
    _$jscoverage['browser/events.js'][132]++;
    this.$events = {};
  }
  _$jscoverage['browser/events.js'][135]++;
  if (! this.$events[name]) {
    _$jscoverage['browser/events.js'][136]++;
    this.$events[name] = [];
  }
  _$jscoverage['browser/events.js'][139]++;
  if (! isArray(this.$events[name])) {
    _$jscoverage['browser/events.js'][140]++;
    this.$events[name] = [this.$events[name]];
  }
  _$jscoverage['browser/events.js'][143]++;
  return this.$events[name];
});
_$jscoverage['browser/events.js'][152]++;
EventEmitter.prototype.emit = (function (name) {
  _$jscoverage['browser/events.js'][153]++;
  if (! this.$events) {
    _$jscoverage['browser/events.js'][154]++;
    return false;
  }
  _$jscoverage['browser/events.js'][157]++;
  var handler = this.$events[name];
  _$jscoverage['browser/events.js'][159]++;
  if (! handler) {
    _$jscoverage['browser/events.js'][160]++;
    return false;
  }
  _$jscoverage['browser/events.js'][163]++;
  var args = [].slice.call(arguments, 1);
  _$jscoverage['browser/events.js'][165]++;
  if ("function" == typeof handler) {
    _$jscoverage['browser/events.js'][166]++;
    handler.apply(this, args);
  }
  else {
    _$jscoverage['browser/events.js'][167]++;
    if (isArray(handler)) {
      _$jscoverage['browser/events.js'][168]++;
      var listeners = handler.slice();
      _$jscoverage['browser/events.js'][170]++;
      for (var i = 0, l = listeners.length; i < l; i++) {
        _$jscoverage['browser/events.js'][171]++;
        listeners[i].apply(this, args);
}
    }
    else {
      _$jscoverage['browser/events.js'][174]++;
      return false;
    }
  }
  _$jscoverage['browser/events.js'][177]++;
  return true;
});
_$jscoverage['browser/events.js'].source = ["","/**"," * Module exports."," */","","exports.EventEmitter = EventEmitter;","","/**"," * Check if `obj` is an array."," */","","function isArray(obj) {","  return '[object Array]' == {}.toString.call(obj);","}","","/**"," * Event emitter constructor."," *"," * @api public."," */","","function EventEmitter(){};","","/**"," * Adds a listener."," *"," * @api public"," */","","EventEmitter.prototype.on = function (name, fn) {","  if (!this.$events) {","    this.$events = {};","  }","","  if (!this.$events[name]) {","    this.$events[name] = fn;","  } else if (isArray(this.$events[name])) {","    this.$events[name].push(fn);","  } else {","    this.$events[name] = [this.$events[name], fn];","  }","","  return this;","};","","EventEmitter.prototype.addListener = EventEmitter.prototype.on;","","/**"," * Adds a volatile listener."," *"," * @api public"," */","","EventEmitter.prototype.once = function (name, fn) {","  var self = this;","","  function on () {","    self.removeListener(name, on);","    fn.apply(this, arguments);","  };","","  on.listener = fn;","  this.on(name, on);","","  return this;","};","","/**"," * Removes a listener."," *"," * @api public"," */","","EventEmitter.prototype.removeListener = function (name, fn) {","  if (this.$events &amp;&amp; this.$events[name]) {","    var list = this.$events[name];","","    if (isArray(list)) {","      var pos = -1;","","      for (var i = 0, l = list.length; i &lt; l; i++) {","        if (list[i] === fn || (list[i].listener &amp;&amp; list[i].listener === fn)) {","          pos = i;","          break;","        }","      }","","      if (pos &lt; 0) {","        return this;","      }","","      list.splice(pos, 1);","","      if (!list.length) {","        delete this.$events[name];","      }","    } else if (list === fn || (list.listener &amp;&amp; list.listener === fn)) {","      delete this.$events[name];","    }","  }","","  return this;","};","","/**"," * Removes all listeners for an event."," *"," * @api public"," */","","EventEmitter.prototype.removeAllListeners = function (name) {","  if (name === undefined) {","    this.$events = {};","    return this;","  }","","  if (this.$events &amp;&amp; this.$events[name]) {","    this.$events[name] = null;","  }","","  return this;","};","","/**"," * Gets all listeners for a certain event."," *"," * @api publci"," */","","EventEmitter.prototype.listeners = function (name) {","  if (!this.$events) {","    this.$events = {};","  }","","  if (!this.$events[name]) {","    this.$events[name] = [];","  }","","  if (!isArray(this.$events[name])) {","    this.$events[name] = [this.$events[name]];","  }","","  return this.$events[name];","};","","/**"," * Emits an event."," *"," * @api public"," */","","EventEmitter.prototype.emit = function (name) {","  if (!this.$events) {","    return false;","  }","","  var handler = this.$events[name];","","  if (!handler) {","    return false;","  }","","  var args = [].slice.call(arguments, 1);","","  if ('function' == typeof handler) {","    handler.apply(this, args);","  } else if (isArray(handler)) {","    var listeners = handler.slice();","","    for (var i = 0, l = listeners.length; i &lt; l; i++) {","      listeners[i].apply(this, args);","    }","  } else {","    return false;","  }","","  return true;","};"];
