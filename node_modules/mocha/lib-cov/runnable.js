/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['runnable.js']) {
  _$jscoverage['runnable.js'] = [];
  _$jscoverage['runnable.js'][6] = 0;
  _$jscoverage['runnable.js'][13] = 0;
  _$jscoverage['runnable.js'][23] = 0;
  _$jscoverage['runnable.js'][24] = 0;
  _$jscoverage['runnable.js'][25] = 0;
  _$jscoverage['runnable.js'][26] = 0;
  _$jscoverage['runnable.js'][27] = 0;
  _$jscoverage['runnable.js'][28] = 0;
  _$jscoverage['runnable.js'][29] = 0;
  _$jscoverage['runnable.js'][36] = 0;
  _$jscoverage['runnable.js'][46] = 0;
  _$jscoverage['runnable.js'][47] = 0;
  _$jscoverage['runnable.js'][48] = 0;
  _$jscoverage['runnable.js'][49] = 0;
  _$jscoverage['runnable.js'][50] = 0;
  _$jscoverage['runnable.js'][51] = 0;
  _$jscoverage['runnable.js'][62] = 0;
  _$jscoverage['runnable.js'][63] = 0;
  _$jscoverage['runnable.js'][72] = 0;
  _$jscoverage['runnable.js'][73] = 0;
  _$jscoverage['runnable.js'][82] = 0;
  _$jscoverage['runnable.js'][83] = 0;
  _$jscoverage['runnable.js'][86] = 0;
  _$jscoverage['runnable.js'][87] = 0;
  _$jscoverage['runnable.js'][88] = 0;
  _$jscoverage['runnable.js'][89] = 0;
  _$jscoverage['runnable.js'][90] = 0;
  _$jscoverage['runnable.js'][102] = 0;
  _$jscoverage['runnable.js'][103] = 0;
  _$jscoverage['runnable.js'][111] = 0;
  _$jscoverage['runnable.js'][112] = 0;
  _$jscoverage['runnable.js'][113] = 0;
  _$jscoverage['runnable.js'][114] = 0;
  _$jscoverage['runnable.js'][115] = 0;
  _$jscoverage['runnable.js'][121] = 0;
  _$jscoverage['runnable.js'][122] = 0;
  _$jscoverage['runnable.js'][123] = 0;
  _$jscoverage['runnable.js'][124] = 0;
  _$jscoverage['runnable.js'][128] = 0;
  _$jscoverage['runnable.js'][129] = 0;
  _$jscoverage['runnable.js'][130] = 0;
  _$jscoverage['runnable.js'][131] = 0;
  _$jscoverage['runnable.js'][132] = 0;
  _$jscoverage['runnable.js'][133] = 0;
  _$jscoverage['runnable.js'][134] = 0;
  _$jscoverage['runnable.js'][138] = 0;
  _$jscoverage['runnable.js'][141] = 0;
  _$jscoverage['runnable.js'][142] = 0;
  _$jscoverage['runnable.js'][143] = 0;
  _$jscoverage['runnable.js'][144] = 0;
  _$jscoverage['runnable.js'][145] = 0;
  _$jscoverage['runnable.js'][146] = 0;
  _$jscoverage['runnable.js'][149] = 0;
  _$jscoverage['runnable.js'][151] = 0;
  _$jscoverage['runnable.js'][155] = 0;
  _$jscoverage['runnable.js'][156] = 0;
  _$jscoverage['runnable.js'][157] = 0;
  _$jscoverage['runnable.js'][158] = 0;
  _$jscoverage['runnable.js'][160] = 0;
}
_$jscoverage['runnable.js'][6]++;
var EventEmitter = require("events").EventEmitter, debug = require("debug")("runnable");
_$jscoverage['runnable.js'][13]++;
module.exports = Runnable;
_$jscoverage['runnable.js'][23]++;
function Runnable(title, fn) {
  _$jscoverage['runnable.js'][24]++;
  this.title = title;
  _$jscoverage['runnable.js'][25]++;
  this.fn = fn;
  _$jscoverage['runnable.js'][26]++;
  this.async = fn && fn.length;
  _$jscoverage['runnable.js'][27]++;
  this.sync = ! this.async;
  _$jscoverage['runnable.js'][28]++;
  this._timeout = 2000;
  _$jscoverage['runnable.js'][29]++;
  this.timedOut = false;
}
_$jscoverage['runnable.js'][36]++;
Runnable.prototype.__proto__ = EventEmitter.prototype;
_$jscoverage['runnable.js'][46]++;
Runnable.prototype.timeout = (function (ms) {
  _$jscoverage['runnable.js'][47]++;
  if (0 == arguments.length) {
    _$jscoverage['runnable.js'][47]++;
    return this._timeout;
  }
  _$jscoverage['runnable.js'][48]++;
  debug("timeout %d", ms);
  _$jscoverage['runnable.js'][49]++;
  this._timeout = ms;
  _$jscoverage['runnable.js'][50]++;
  if (this.timer) {
    _$jscoverage['runnable.js'][50]++;
    this.resetTimeout();
  }
  _$jscoverage['runnable.js'][51]++;
  return this;
});
_$jscoverage['runnable.js'][62]++;
Runnable.prototype.fullTitle = (function () {
  _$jscoverage['runnable.js'][63]++;
  return this.parent.fullTitle() + " " + this.title;
});
_$jscoverage['runnable.js'][72]++;
Runnable.prototype.clearTimeout = (function () {
  _$jscoverage['runnable.js'][73]++;
  clearTimeout(this.timer);
});
_$jscoverage['runnable.js'][82]++;
Runnable.prototype.resetTimeout = (function () {
  _$jscoverage['runnable.js'][83]++;
  var self = this, ms = this.timeout();
  _$jscoverage['runnable.js'][86]++;
  this.clearTimeout();
  _$jscoverage['runnable.js'][87]++;
  if (ms) {
    _$jscoverage['runnable.js'][88]++;
    this.timer = setTimeout((function () {
  _$jscoverage['runnable.js'][89]++;
  self.callback(new Error("timeout of " + ms + "ms exceeded"));
  _$jscoverage['runnable.js'][90]++;
  self.timedOut = true;
}), ms);
  }
});
_$jscoverage['runnable.js'][102]++;
Runnable.prototype.run = (function (fn) {
  _$jscoverage['runnable.js'][103]++;
  var self = this, ms = this.timeout(), start = new Date(), ctx = this.ctx, finished, emitted;
  _$jscoverage['runnable.js'][111]++;
  if (this.async) {
    _$jscoverage['runnable.js'][112]++;
    if (ms) {
      _$jscoverage['runnable.js'][113]++;
      this.timer = setTimeout((function () {
  _$jscoverage['runnable.js'][114]++;
  done(new Error("timeout of " + ms + "ms exceeded"));
  _$jscoverage['runnable.js'][115]++;
  self.timedOut = true;
}), ms);
    }
  }
  _$jscoverage['runnable.js'][121]++;
  function multiple() {
    _$jscoverage['runnable.js'][122]++;
    if (emitted) {
      _$jscoverage['runnable.js'][122]++;
      return;
    }
    _$jscoverage['runnable.js'][123]++;
    emitted = true;
    _$jscoverage['runnable.js'][124]++;
    self.emit("error", new Error("done() called multiple times"));
}
  _$jscoverage['runnable.js'][128]++;
  function done(err) {
    _$jscoverage['runnable.js'][129]++;
    if (self.timedOut) {
      _$jscoverage['runnable.js'][129]++;
      return;
    }
    _$jscoverage['runnable.js'][130]++;
    if (finished) {
      _$jscoverage['runnable.js'][130]++;
      return multiple();
    }
    _$jscoverage['runnable.js'][131]++;
    self.clearTimeout();
    _$jscoverage['runnable.js'][132]++;
    self.duration = new Date() - start;
    _$jscoverage['runnable.js'][133]++;
    finished = true;
    _$jscoverage['runnable.js'][134]++;
    fn(err);
}
  _$jscoverage['runnable.js'][138]++;
  this.callback = done;
  _$jscoverage['runnable.js'][141]++;
  if (this.async) {
    _$jscoverage['runnable.js'][142]++;
    try {
      _$jscoverage['runnable.js'][143]++;
      this.fn.call(ctx, (function (err) {
  _$jscoverage['runnable.js'][144]++;
  if (err instanceof Error) {
    _$jscoverage['runnable.js'][144]++;
    return done(err);
  }
  _$jscoverage['runnable.js'][145]++;
  if (null != err) {
    _$jscoverage['runnable.js'][145]++;
    return done(new Error("done() invoked with non-Error: " + err));
  }
  _$jscoverage['runnable.js'][146]++;
  done();
}));
    }
    catch (err) {
      _$jscoverage['runnable.js'][149]++;
      done(err);
    }
    _$jscoverage['runnable.js'][151]++;
    return;
  }
  _$jscoverage['runnable.js'][155]++;
  try {
    _$jscoverage['runnable.js'][156]++;
    if (! this.pending) {
      _$jscoverage['runnable.js'][156]++;
      this.fn.call(ctx);
    }
    _$jscoverage['runnable.js'][157]++;
    this.duration = new Date() - start;
    _$jscoverage['runnable.js'][158]++;
    fn();
  }
  catch (err) {
    _$jscoverage['runnable.js'][160]++;
    fn(err);
  }
});
_$jscoverage['runnable.js'].source = ["","/**"," * Module dependencies."," */","","var EventEmitter = require('events').EventEmitter","  , debug = require('debug')('runnable');","","/**"," * Expose `Runnable`."," */","","module.exports = Runnable;","","/**"," * Initialize a new `Runnable` with the given `title` and callback `fn`."," *"," * @param {String} title"," * @param {Function} fn"," * @api private"," */","","function Runnable(title, fn) {","  this.title = title;","  this.fn = fn;","  this.async = fn &amp;&amp; fn.length;","  this.sync = ! this.async;","  this._timeout = 2000;","  this.timedOut = false;","}","","/**"," * Inherit from `EventEmitter.prototype`."," */","","Runnable.prototype.__proto__ = EventEmitter.prototype;","","/**"," * Set &amp; get timeout `ms`."," *"," * @param {Number} ms"," * @return {Runnable|Number} ms or self"," * @api private"," */","","Runnable.prototype.timeout = function(ms){","  if (0 == arguments.length) return this._timeout;","  debug('timeout %d', ms);","  this._timeout = ms;","  if (this.timer) this.resetTimeout();","  return this;","};","","/**"," * Return the full title generated by recursively"," * concatenating the parent's full title."," *"," * @return {String}"," * @api public"," */","","Runnable.prototype.fullTitle = function(){","  return this.parent.fullTitle() + ' ' + this.title;","};","","/**"," * Clear the timeout."," *"," * @api private"," */","","Runnable.prototype.clearTimeout = function(){","  clearTimeout(this.timer);","};","","/**"," * Reset the timeout."," *"," * @api private"," */","","Runnable.prototype.resetTimeout = function(){","  var self = this","    , ms = this.timeout();","","  this.clearTimeout();","  if (ms) {","    this.timer = setTimeout(function(){","      self.callback(new Error('timeout of ' + ms + 'ms exceeded'));","      self.timedOut = true;","    }, ms);","  }","};","","/**"," * Run the test and invoke `fn(err)`."," *"," * @param {Function} fn"," * @api private"," */","","Runnable.prototype.run = function(fn){","  var self = this","    , ms = this.timeout()","    , start = new Date","    , ctx = this.ctx","    , finished","    , emitted;","","  // timeout","  if (this.async) {","    if (ms) {","      this.timer = setTimeout(function(){","        done(new Error('timeout of ' + ms + 'ms exceeded'));","        self.timedOut = true;","      }, ms);","    }","  }","","  // called multiple times","  function multiple() {","    if (emitted) return;","    emitted = true;","    self.emit('error', new Error('done() called multiple times'));","  }","","  // finished","  function done(err) {","    if (self.timedOut) return;","    if (finished) return multiple();","    self.clearTimeout();","    self.duration = new Date - start;","    finished = true;","    fn(err);","  }","","  // for .resetTimeout()","  this.callback = done;","","  // async","  if (this.async) {","    try {","      this.fn.call(ctx, function(err){","        if (err instanceof Error) return done(err);","        if (null != err) return done(new Error('done() invoked with non-Error: ' + err));","        done();","      });","    } catch (err) {","      done(err);","    }","    return;","  }","  ","  // sync","  try {","    if (!this.pending) this.fn.call(ctx);","    this.duration = new Date - start;","    fn();","  } catch (err) {","    fn(err);","  }","};"];
