/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['utils.js']) {
  _$jscoverage['utils.js'] = [];
  _$jscoverage['utils.js'][6] = 0;
  _$jscoverage['utils.js'][15] = 0;
  _$jscoverage['utils.js'][25] = 0;
  _$jscoverage['utils.js'][26] = 0;
  _$jscoverage['utils.js'][42] = 0;
  _$jscoverage['utils.js'][43] = 0;
  _$jscoverage['utils.js'][44] = 0;
  _$jscoverage['utils.js'][56] = 0;
  _$jscoverage['utils.js'][57] = 0;
  _$jscoverage['utils.js'][58] = 0;
  _$jscoverage['utils.js'][59] = 0;
  _$jscoverage['utils.js'][61] = 0;
  _$jscoverage['utils.js'][74] = 0;
  _$jscoverage['utils.js'][75] = 0;
  _$jscoverage['utils.js'][77] = 0;
  _$jscoverage['utils.js'][78] = 0;
  _$jscoverage['utils.js'][81] = 0;
  _$jscoverage['utils.js'][93] = 0;
  _$jscoverage['utils.js'][94] = 0;
  _$jscoverage['utils.js'][96] = 0;
  _$jscoverage['utils.js'][97] = 0;
  _$jscoverage['utils.js'][98] = 0;
  _$jscoverage['utils.js'][99] = 0;
  _$jscoverage['utils.js'][102] = 0;
  _$jscoverage['utils.js'][113] = 0;
  _$jscoverage['utils.js'][114] = 0;
  _$jscoverage['utils.js'][117] = 0;
  _$jscoverage['utils.js'][118] = 0;
  _$jscoverage['utils.js'][119] = 0;
  _$jscoverage['utils.js'][123] = 0;
  _$jscoverage['utils.js'][135] = 0;
  _$jscoverage['utils.js'][136] = 0;
  _$jscoverage['utils.js'][137] = 0;
  _$jscoverage['utils.js'][138] = 0;
  _$jscoverage['utils.js'][139] = 0;
  _$jscoverage['utils.js'][140] = 0;
  _$jscoverage['utils.js'][149] = 0;
  _$jscoverage['utils.js'][150] = 0;
  _$jscoverage['utils.js'][160] = 0;
  _$jscoverage['utils.js'][161] = 0;
  _$jscoverage['utils.js'][163] = 0;
  _$jscoverage['utils.js'][166] = 0;
  _$jscoverage['utils.js'][167] = 0;
  _$jscoverage['utils.js'][168] = 0;
  _$jscoverage['utils.js'][169] = 0;
  _$jscoverage['utils.js'][170] = 0;
  _$jscoverage['utils.js'][174] = 0;
}
_$jscoverage['utils.js'][6]++;
var fs = require("fs"), path = require("path"), join = path.join, debug = require("debug")("watch");
_$jscoverage['utils.js'][15]++;
var ignore = ["node_modules", ".git"];
_$jscoverage['utils.js'][25]++;
exports.escape = (function (html) {
  _$jscoverage['utils.js'][26]++;
  return String(html).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
});
_$jscoverage['utils.js'][42]++;
exports.forEach = (function (arr, fn, scope) {
  _$jscoverage['utils.js'][43]++;
  for (var i = 0, l = arr.length; i < l; i++) {
    _$jscoverage['utils.js'][44]++;
    fn.call(scope, arr[i], i);
}
});
_$jscoverage['utils.js'][56]++;
exports.indexOf = (function (arr, obj, start) {
  _$jscoverage['utils.js'][57]++;
  for (var i = start || 0, l = arr.length; i < l; i++) {
    _$jscoverage['utils.js'][58]++;
    if (arr[i] === obj) {
      _$jscoverage['utils.js'][59]++;
      return i;
    }
}
  _$jscoverage['utils.js'][61]++;
  return -1;
});
_$jscoverage['utils.js'][74]++;
exports.reduce = (function (arr, fn, val, scope) {
  _$jscoverage['utils.js'][75]++;
  var rval = val;
  _$jscoverage['utils.js'][77]++;
  for (var i = 0, l = arr.length; i < l; i++) {
    _$jscoverage['utils.js'][78]++;
    rval = fn.call(scope, rval, arr[i], i, arr);
}
  _$jscoverage['utils.js'][81]++;
  return rval;
});
_$jscoverage['utils.js'][93]++;
exports.filter = (function (arr, fn, scope) {
  _$jscoverage['utils.js'][94]++;
  var ret = [];
  _$jscoverage['utils.js'][96]++;
  for (var i = 0, l = arr.length; i < l; i++) {
    _$jscoverage['utils.js'][97]++;
    var val = arr[i];
    _$jscoverage['utils.js'][98]++;
    if (fn.call(scope, val, i, arr)) {
      _$jscoverage['utils.js'][99]++;
      ret.push(val);
    }
}
  _$jscoverage['utils.js'][102]++;
  return ret;
});
_$jscoverage['utils.js'][113]++;
exports.keys = Object.keys || (function (obj) {
  _$jscoverage['utils.js'][114]++;
  var keys = [], has = Object.prototype.hasOwnProperty;
  _$jscoverage['utils.js'][117]++;
  for (var key in obj) {
    _$jscoverage['utils.js'][118]++;
    if (has.call(obj, key)) {
      _$jscoverage['utils.js'][119]++;
      keys.push(key);
    }
}
  _$jscoverage['utils.js'][123]++;
  return keys;
});
_$jscoverage['utils.js'][135]++;
exports.watch = (function (files, fn) {
  _$jscoverage['utils.js'][136]++;
  var options = {interval: 100};
  _$jscoverage['utils.js'][137]++;
  files.forEach((function (file) {
  _$jscoverage['utils.js'][138]++;
  debug("file %s", file);
  _$jscoverage['utils.js'][139]++;
  fs.watchFile(file, options, (function (curr, prev) {
  _$jscoverage['utils.js'][140]++;
  if (prev.mtime < curr.mtime) {
    _$jscoverage['utils.js'][140]++;
    fn(file);
  }
}));
}));
});
_$jscoverage['utils.js'][149]++;
function ignored(path) {
  _$jscoverage['utils.js'][150]++;
  return ! ~ ignore.indexOf(path);
}
_$jscoverage['utils.js'][160]++;
exports.files = (function (dir, ret) {
  _$jscoverage['utils.js'][161]++;
  ret = ret || [];
  _$jscoverage['utils.js'][163]++;
  fs.readdirSync(dir).filter(ignored).forEach((function (path) {
  _$jscoverage['utils.js'][166]++;
  path = join(dir, path);
  _$jscoverage['utils.js'][167]++;
  if (fs.statSync(path).isDirectory()) {
    _$jscoverage['utils.js'][168]++;
    exports.files(path, ret);
  }
  else {
    _$jscoverage['utils.js'][169]++;
    if (path.match(/\.(js|coffee)$/)) {
      _$jscoverage['utils.js'][170]++;
      ret.push(path);
    }
  }
}));
  _$jscoverage['utils.js'][174]++;
  return ret;
});
_$jscoverage['utils.js'].source = ["","/**"," * Module dependencies."," */","","var fs = require('fs')","  , path = require('path')","  , join = path.join","  , debug = require('debug')('watch');","","/**"," * Ignored directories."," */","","var ignore = ['node_modules', '.git'];","","/**"," * Escape special characters in the given string of html."," *"," * @param  {String} html"," * @return {String}"," * @api private"," */","","exports.escape = function(html) {","  return String(html)","    .replace(/&amp;/g, '&amp;amp;')","    .replace(/\"/g, '&amp;quot;')","    .replace(/&lt;/g, '&amp;lt;')","    .replace(/&gt;/g, '&amp;gt;');","};","","/**"," * Array#forEach (&lt;=IE8)"," *"," * @param {Array} array"," * @param {Function} fn"," * @param {Object} scope"," * @api private"," */","","exports.forEach = function(arr, fn, scope) {","  for (var i = 0, l = arr.length; i &lt; l; i++)","    fn.call(scope, arr[i], i);","};","","/**"," * Array#indexOf (&lt;=IE8)"," *"," * @parma {Array} arr"," * @param {Object} obj to find index of"," * @param {Number} start"," * @api private"," */","","exports.indexOf = function (arr, obj, start) {","  for (var i = start || 0, l = arr.length; i &lt; l; i++) {","    if (arr[i] === obj)","      return i;","  }","  return -1;","};","","/**"," * Array#reduce (&lt;=IE8)"," * "," * @param {Array} array"," * @param {Function} fn"," * @param {Object} initial value"," * @param {Object} scope"," * @api private"," */","","exports.reduce = function(arr, fn, val, scope) {","  var rval = val;","","  for (var i = 0, l = arr.length; i &lt; l; i++) {","    rval = fn.call(scope, rval, arr[i], i, arr);","  }","","  return rval;","};","","/**"," * Array#filter (&lt;=IE8)"," *"," * @param {Array} array"," * @param {Function} fn"," * @param {Object} scope"," * @api private"," */","","exports.filter = function(arr, fn, scope) {","  var ret = [];","","  for (var i = 0, l = arr.length; i &lt; l; i++) {","    var val = arr[i];","    if (fn.call(scope, val, i, arr))","      ret.push(val);","  }","","  return ret;","};","","/**"," * Object.keys (&lt;=IE8)"," *"," * @param {Object} obj"," * @return {Array} keys"," * @api private"," */","","exports.keys = Object.keys || function(obj) {","  var keys = []","    , has = Object.prototype.hasOwnProperty // for `window` on &lt;=IE8","","  for (var key in obj) {","    if (has.call(obj, key)) {","      keys.push(key);","    }","  }","","  return keys;","};","","/**"," * Watch the given `files` for changes"," * and invoke `fn(file)` on modification."," *"," * @param {Array} files"," * @param {Function} fn"," * @api private"," */","","exports.watch = function(files, fn){","  var options = { interval: 100 };","  files.forEach(function(file){","    debug('file %s', file);","    fs.watchFile(file, options, function(curr, prev){","      if (prev.mtime &lt; curr.mtime) fn(file);","    });","  });","};","","/**"," * Ignored files."," */","","function ignored(path){","  return !~ignore.indexOf(path);","}","","/**"," * Lookup files in the given `dir`."," *"," * @return {Array}"," * @api private"," */","","exports.files = function(dir, ret){","  ret = ret || [];","","  fs.readdirSync(dir)","  .filter(ignored)","  .forEach(function(path){","    path = join(dir, path);","    if (fs.statSync(path).isDirectory()) {","      exports.files(path, ret);","    } else if (path.match(/\\.(js|coffee)$/)) {","      ret.push(path);","    }","  });","","  return ret;","};"];
