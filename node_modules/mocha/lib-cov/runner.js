/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['runner.js']) {
  _$jscoverage['runner.js'] = [];
  _$jscoverage['runner.js'][6] = 0;
  _$jscoverage['runner.js'][16] = 0;
  _$jscoverage['runner.js'][37] = 0;
  _$jscoverage['runner.js'][38] = 0;
  _$jscoverage['runner.js'][39] = 0;
  _$jscoverage['runner.js'][40] = 0;
  _$jscoverage['runner.js'][41] = 0;
  _$jscoverage['runner.js'][42] = 0;
  _$jscoverage['runner.js'][43] = 0;
  _$jscoverage['runner.js'][44] = 0;
  _$jscoverage['runner.js'][45] = 0;
  _$jscoverage['runner.js'][46] = 0;
  _$jscoverage['runner.js'][53] = 0;
  _$jscoverage['runner.js'][63] = 0;
  _$jscoverage['runner.js'][64] = 0;
  _$jscoverage['runner.js'][65] = 0;
  _$jscoverage['runner.js'][66] = 0;
  _$jscoverage['runner.js'][77] = 0;
  _$jscoverage['runner.js'][78] = 0;
  _$jscoverage['runner.js'][79] = 0;
  _$jscoverage['runner.js'][80] = 0;
  _$jscoverage['runner.js'][81] = 0;
  _$jscoverage['runner.js'][83] = 0;
  _$jscoverage['runner.js'][92] = 0;
  _$jscoverage['runner.js'][93] = 0;
  _$jscoverage['runner.js'][95] = 0;
  _$jscoverage['runner.js'][96] = 0;
  _$jscoverage['runner.js'][99] = 0;
  _$jscoverage['runner.js'][101] = 0;
  _$jscoverage['runner.js'][102] = 0;
  _$jscoverage['runner.js'][103] = 0;
  _$jscoverage['runner.js'][104] = 0;
  _$jscoverage['runner.js'][116] = 0;
  _$jscoverage['runner.js'][117] = 0;
  _$jscoverage['runner.js'][118] = 0;
  _$jscoverage['runner.js'][119] = 0;
  _$jscoverage['runner.js'][135] = 0;
  _$jscoverage['runner.js'][136] = 0;
  _$jscoverage['runner.js'][137] = 0;
  _$jscoverage['runner.js'][148] = 0;
  _$jscoverage['runner.js'][149] = 0;
  _$jscoverage['runner.js'][155] = 0;
  _$jscoverage['runner.js'][156] = 0;
  _$jscoverage['runner.js'][157] = 0;
  _$jscoverage['runner.js'][158] = 0;
  _$jscoverage['runner.js'][159] = 0;
  _$jscoverage['runner.js'][161] = 0;
  _$jscoverage['runner.js'][163] = 0;
  _$jscoverage['runner.js'][164] = 0;
  _$jscoverage['runner.js'][167] = 0;
  _$jscoverage['runner.js'][168] = 0;
  _$jscoverage['runner.js'][169] = 0;
  _$jscoverage['runner.js'][170] = 0;
  _$jscoverage['runner.js'][171] = 0;
  _$jscoverage['runner.js'][175] = 0;
  _$jscoverage['runner.js'][176] = 0;
  _$jscoverage['runner.js'][190] = 0;
  _$jscoverage['runner.js'][191] = 0;
  _$jscoverage['runner.js'][194] = 0;
  _$jscoverage['runner.js'][195] = 0;
  _$jscoverage['runner.js'][197] = 0;
  _$jscoverage['runner.js'][198] = 0;
  _$jscoverage['runner.js'][199] = 0;
  _$jscoverage['runner.js'][202] = 0;
  _$jscoverage['runner.js'][203] = 0;
  _$jscoverage['runner.js'][204] = 0;
  _$jscoverage['runner.js'][205] = 0;
  _$jscoverage['runner.js'][208] = 0;
  _$jscoverage['runner.js'][212] = 0;
  _$jscoverage['runner.js'][223] = 0;
  _$jscoverage['runner.js'][224] = 0;
  _$jscoverage['runner.js'][225] = 0;
  _$jscoverage['runner.js'][236] = 0;
  _$jscoverage['runner.js'][237] = 0;
  _$jscoverage['runner.js'][238] = 0;
  _$jscoverage['runner.js'][249] = 0;
  _$jscoverage['runner.js'][250] = 0;
  _$jscoverage['runner.js'][252] = 0;
  _$jscoverage['runner.js'][253] = 0;
  _$jscoverage['runner.js'][263] = 0;
  _$jscoverage['runner.js'][264] = 0;
  _$jscoverage['runner.js'][267] = 0;
  _$jscoverage['runner.js'][268] = 0;
  _$jscoverage['runner.js'][269] = 0;
  _$jscoverage['runner.js'][270] = 0;
  _$jscoverage['runner.js'][272] = 0;
  _$jscoverage['runner.js'][274] = 0;
  _$jscoverage['runner.js'][287] = 0;
  _$jscoverage['runner.js'][288] = 0;
  _$jscoverage['runner.js'][292] = 0;
  _$jscoverage['runner.js'][294] = 0;
  _$jscoverage['runner.js'][297] = 0;
  _$jscoverage['runner.js'][300] = 0;
  _$jscoverage['runner.js'][303] = 0;
  _$jscoverage['runner.js'][306] = 0;
  _$jscoverage['runner.js'][307] = 0;
  _$jscoverage['runner.js'][308] = 0;
  _$jscoverage['runner.js'][309] = 0;
  _$jscoverage['runner.js'][313] = 0;
  _$jscoverage['runner.js'][314] = 0;
  _$jscoverage['runner.js'][315] = 0;
  _$jscoverage['runner.js'][316] = 0;
  _$jscoverage['runner.js'][317] = 0;
  _$jscoverage['runner.js'][319] = 0;
  _$jscoverage['runner.js'][320] = 0;
  _$jscoverage['runner.js'][321] = 0;
  _$jscoverage['runner.js'][322] = 0;
  _$jscoverage['runner.js'][325] = 0;
  _$jscoverage['runner.js'][326] = 0;
  _$jscoverage['runner.js'][327] = 0;
  _$jscoverage['runner.js'][328] = 0;
  _$jscoverage['runner.js'][333] = 0;
  _$jscoverage['runner.js'][334] = 0;
  _$jscoverage['runner.js'][346] = 0;
  _$jscoverage['runner.js'][347] = 0;
  _$jscoverage['runner.js'][350] = 0;
  _$jscoverage['runner.js'][351] = 0;
  _$jscoverage['runner.js'][353] = 0;
  _$jscoverage['runner.js'][354] = 0;
  _$jscoverage['runner.js'][355] = 0;
  _$jscoverage['runner.js'][356] = 0;
  _$jscoverage['runner.js'][359] = 0;
  _$jscoverage['runner.js'][360] = 0;
  _$jscoverage['runner.js'][361] = 0;
  _$jscoverage['runner.js'][362] = 0;
  _$jscoverage['runner.js'][363] = 0;
  _$jscoverage['runner.js'][367] = 0;
  _$jscoverage['runner.js'][368] = 0;
  _$jscoverage['runner.js'][379] = 0;
  _$jscoverage['runner.js'][380] = 0;
  _$jscoverage['runner.js'][381] = 0;
  _$jscoverage['runner.js'][382] = 0;
  _$jscoverage['runner.js'][383] = 0;
  _$jscoverage['runner.js'][384] = 0;
  _$jscoverage['runner.js'][385] = 0;
  _$jscoverage['runner.js'][388] = 0;
  _$jscoverage['runner.js'][389] = 0;
  _$jscoverage['runner.js'][390] = 0;
  _$jscoverage['runner.js'][391] = 0;
  _$jscoverage['runner.js'][395] = 0;
  _$jscoverage['runner.js'][407] = 0;
  _$jscoverage['runner.js'][408] = 0;
  _$jscoverage['runner.js'][411] = 0;
  _$jscoverage['runner.js'][414] = 0;
  _$jscoverage['runner.js'][415] = 0;
  _$jscoverage['runner.js'][416] = 0;
  _$jscoverage['runner.js'][417] = 0;
  _$jscoverage['runner.js'][421] = 0;
  _$jscoverage['runner.js'][422] = 0;
  _$jscoverage['runner.js'][423] = 0;
  _$jscoverage['runner.js'][424] = 0;
  _$jscoverage['runner.js'][428] = 0;
  _$jscoverage['runner.js'][429] = 0;
  _$jscoverage['runner.js'][432] = 0;
}
_$jscoverage['runner.js'][6]++;
var EventEmitter = require("events").EventEmitter, debug = require("debug")("runner"), Test = require("./test"), utils = require("./utils"), noop = (function () {
});
_$jscoverage['runner.js'][16]++;
module.exports = Runner;
_$jscoverage['runner.js'][37]++;
function Runner(suite) {
  _$jscoverage['runner.js'][38]++;
  var self = this;
  _$jscoverage['runner.js'][39]++;
  this._globals = [];
  _$jscoverage['runner.js'][40]++;
  this.suite = suite;
  _$jscoverage['runner.js'][41]++;
  this.total = suite.total();
  _$jscoverage['runner.js'][42]++;
  this.failures = 0;
  _$jscoverage['runner.js'][43]++;
  this.on("test end", (function (test) {
  _$jscoverage['runner.js'][43]++;
  self.checkGlobals(test);
}));
  _$jscoverage['runner.js'][44]++;
  this.on("hook end", (function (hook) {
  _$jscoverage['runner.js'][44]++;
  self.checkGlobals(hook);
}));
  _$jscoverage['runner.js'][45]++;
  this.grep(/.*/);
  _$jscoverage['runner.js'][46]++;
  this.globals(utils.keys(global).concat(["errno"]));
}
_$jscoverage['runner.js'][53]++;
Runner.prototype.__proto__ = EventEmitter.prototype;
_$jscoverage['runner.js'][63]++;
Runner.prototype.grep = (function (re) {
  _$jscoverage['runner.js'][64]++;
  debug("grep %s", re);
  _$jscoverage['runner.js'][65]++;
  this._grep = re;
  _$jscoverage['runner.js'][66]++;
  return this;
});
_$jscoverage['runner.js'][77]++;
Runner.prototype.globals = (function (arr) {
  _$jscoverage['runner.js'][78]++;
  if (0 == arguments.length) {
    _$jscoverage['runner.js'][78]++;
    return this._globals;
  }
  _$jscoverage['runner.js'][79]++;
  debug("globals %j", arr);
  _$jscoverage['runner.js'][80]++;
  utils.forEach(arr, (function (arr) {
  _$jscoverage['runner.js'][81]++;
  this._globals.push(arr);
}), this);
  _$jscoverage['runner.js'][83]++;
  return this;
});
_$jscoverage['runner.js'][92]++;
Runner.prototype.checkGlobals = (function (test) {
  _$jscoverage['runner.js'][93]++;
  if (this.ignoreLeaks) {
    _$jscoverage['runner.js'][93]++;
    return;
  }
  _$jscoverage['runner.js'][95]++;
  var leaks = utils.filter(utils.keys(global), (function (key) {
  _$jscoverage['runner.js'][96]++;
  return ! ~ utils.indexOf(this._globals, key) && (! global.navigator || "onerror" !== key);
}), this);
  _$jscoverage['runner.js'][99]++;
  this._globals = this._globals.concat(leaks);
  _$jscoverage['runner.js'][101]++;
  if (leaks.length > 1) {
    _$jscoverage['runner.js'][102]++;
    this.fail(test, new Error("global leaks detected: " + leaks.join(", ") + ""));
  }
  else {
    _$jscoverage['runner.js'][103]++;
    if (leaks.length) {
      _$jscoverage['runner.js'][104]++;
      this.fail(test, new Error("global leak detected: " + leaks[0]));
    }
  }
});
_$jscoverage['runner.js'][116]++;
Runner.prototype.fail = (function (test, err) {
  _$jscoverage['runner.js'][117]++;
  ++this.failures;
  _$jscoverage['runner.js'][118]++;
  test.state = "failed";
  _$jscoverage['runner.js'][119]++;
  this.emit("fail", test, err);
});
_$jscoverage['runner.js'][135]++;
Runner.prototype.failHook = (function (hook, err) {
  _$jscoverage['runner.js'][136]++;
  this.fail(hook, err);
  _$jscoverage['runner.js'][137]++;
  this.emit("end");
});
_$jscoverage['runner.js'][148]++;
Runner.prototype.hook = (function (name, fn) {
  _$jscoverage['runner.js'][149]++;
  var suite = this.suite, hooks = suite["_" + name], ms = suite._timeout, self = this, timer;
  _$jscoverage['runner.js'][155]++;
  function next(i) {
    _$jscoverage['runner.js'][156]++;
    var hook = hooks[i];
    _$jscoverage['runner.js'][157]++;
    if (! hook) {
      _$jscoverage['runner.js'][157]++;
      return fn();
    }
    _$jscoverage['runner.js'][158]++;
    self.currentRunnable = hook;
    _$jscoverage['runner.js'][159]++;
    hook.ctx.test(self.test);
    _$jscoverage['runner.js'][161]++;
    self.emit("hook", hook);
    _$jscoverage['runner.js'][163]++;
    hook.on("error", (function (err) {
  _$jscoverage['runner.js'][164]++;
  self.failHook(hook, err);
}));
    _$jscoverage['runner.js'][167]++;
    hook.run((function (err) {
  _$jscoverage['runner.js'][168]++;
  hook.removeAllListeners("error");
  _$jscoverage['runner.js'][169]++;
  if (err) {
    _$jscoverage['runner.js'][169]++;
    return self.failHook(hook, err);
  }
  _$jscoverage['runner.js'][170]++;
  self.emit("hook end", hook);
  _$jscoverage['runner.js'][171]++;
  next(++i);
}));
}
  _$jscoverage['runner.js'][175]++;
  process.nextTick((function () {
  _$jscoverage['runner.js'][176]++;
  next(0);
}));
});
_$jscoverage['runner.js'][190]++;
Runner.prototype.hooks = (function (name, suites, fn) {
  _$jscoverage['runner.js'][191]++;
  var self = this, orig = this.suite;
  _$jscoverage['runner.js'][194]++;
  function next(suite) {
    _$jscoverage['runner.js'][195]++;
    self.suite = suite;
    _$jscoverage['runner.js'][197]++;
    if (! suite) {
      _$jscoverage['runner.js'][198]++;
      self.suite = orig;
      _$jscoverage['runner.js'][199]++;
      return fn();
    }
    _$jscoverage['runner.js'][202]++;
    self.hook(name, (function (err) {
  _$jscoverage['runner.js'][203]++;
  if (err) {
    _$jscoverage['runner.js'][204]++;
    self.suite = orig;
    _$jscoverage['runner.js'][205]++;
    return fn(err);
  }
  _$jscoverage['runner.js'][208]++;
  next(suites.pop());
}));
}
  _$jscoverage['runner.js'][212]++;
  next(suites.pop());
});
_$jscoverage['runner.js'][223]++;
Runner.prototype.hookUp = (function (name, fn) {
  _$jscoverage['runner.js'][224]++;
  var suites = [this.suite].concat(this.parents()).reverse();
  _$jscoverage['runner.js'][225]++;
  this.hooks(name, suites, fn);
});
_$jscoverage['runner.js'][236]++;
Runner.prototype.hookDown = (function (name, fn) {
  _$jscoverage['runner.js'][237]++;
  var suites = [this.suite].concat(this.parents());
  _$jscoverage['runner.js'][238]++;
  this.hooks(name, suites, fn);
});
_$jscoverage['runner.js'][249]++;
Runner.prototype.parents = (function () {
  _$jscoverage['runner.js'][250]++;
  var suite = this.suite, suites = [];
  _$jscoverage['runner.js'][252]++;
  while (suite = suite.parent) {
    _$jscoverage['runner.js'][252]++;
    suites.push(suite);
}
  _$jscoverage['runner.js'][253]++;
  return suites;
});
_$jscoverage['runner.js'][263]++;
Runner.prototype.runTest = (function (fn) {
  _$jscoverage['runner.js'][264]++;
  var test = this.test, self = this;
  _$jscoverage['runner.js'][267]++;
  try {
    _$jscoverage['runner.js'][268]++;
    test.ctx.test(test);
    _$jscoverage['runner.js'][269]++;
    test.on("error", (function (err) {
  _$jscoverage['runner.js'][270]++;
  self.fail(test, err);
}));
    _$jscoverage['runner.js'][272]++;
    test.run(fn);
  }
  catch (err) {
    _$jscoverage['runner.js'][274]++;
    fn(err);
  }
});
_$jscoverage['runner.js'][287]++;
Runner.prototype.runTests = (function (suite, fn) {
  _$jscoverage['runner.js'][288]++;
  var self = this, tests = suite.tests, test;
  _$jscoverage['runner.js'][292]++;
  function next(err) {
    _$jscoverage['runner.js'][294]++;
    if (self.failures && suite._bail) {
      _$jscoverage['runner.js'][294]++;
      return fn();
    }
    _$jscoverage['runner.js'][297]++;
    test = tests.shift();
    _$jscoverage['runner.js'][300]++;
    if (! test) {
      _$jscoverage['runner.js'][300]++;
      return fn();
    }
    _$jscoverage['runner.js'][303]++;
    if (! self._grep.test(test.fullTitle())) {
      _$jscoverage['runner.js'][303]++;
      return next();
    }
    _$jscoverage['runner.js'][306]++;
    if (test.pending) {
      _$jscoverage['runner.js'][307]++;
      self.emit("pending", test);
      _$jscoverage['runner.js'][308]++;
      self.emit("test end", test);
      _$jscoverage['runner.js'][309]++;
      return next();
    }
    _$jscoverage['runner.js'][313]++;
    self.emit("test", self.test = test);
    _$jscoverage['runner.js'][314]++;
    self.hookDown("beforeEach", (function () {
  _$jscoverage['runner.js'][315]++;
  self.currentRunnable = self.test;
  _$jscoverage['runner.js'][316]++;
  self.runTest((function (err) {
  _$jscoverage['runner.js'][317]++;
  test = self.test;
  _$jscoverage['runner.js'][319]++;
  if (err) {
    _$jscoverage['runner.js'][320]++;
    self.fail(test, err);
    _$jscoverage['runner.js'][321]++;
    self.emit("test end", test);
    _$jscoverage['runner.js'][322]++;
    return self.hookUp("afterEach", next);
  }
  _$jscoverage['runner.js'][325]++;
  test.state = "passed";
  _$jscoverage['runner.js'][326]++;
  self.emit("pass", test);
  _$jscoverage['runner.js'][327]++;
  self.emit("test end", test);
  _$jscoverage['runner.js'][328]++;
  self.hookUp("afterEach", next);
}));
}));
}
  _$jscoverage['runner.js'][333]++;
  this.next = next;
  _$jscoverage['runner.js'][334]++;
  next();
});
_$jscoverage['runner.js'][346]++;
Runner.prototype.runSuite = (function (suite, fn) {
  _$jscoverage['runner.js'][347]++;
  var self = this, i = 0;
  _$jscoverage['runner.js'][350]++;
  debug("run suite %s", suite.fullTitle());
  _$jscoverage['runner.js'][351]++;
  this.emit("suite", this.suite = suite);
  _$jscoverage['runner.js'][353]++;
  function next() {
    _$jscoverage['runner.js'][354]++;
    var curr = suite.suites[i++];
    _$jscoverage['runner.js'][355]++;
    if (! curr) {
      _$jscoverage['runner.js'][355]++;
      return done();
    }
    _$jscoverage['runner.js'][356]++;
    self.runSuite(curr, next);
}
  _$jscoverage['runner.js'][359]++;
  function done() {
    _$jscoverage['runner.js'][360]++;
    self.suite = suite;
    _$jscoverage['runner.js'][361]++;
    self.hook("afterAll", (function () {
  _$jscoverage['runner.js'][362]++;
  self.emit("suite end", suite);
  _$jscoverage['runner.js'][363]++;
  fn();
}));
}
  _$jscoverage['runner.js'][367]++;
  this.hook("beforeAll", (function () {
  _$jscoverage['runner.js'][368]++;
  self.runTests(suite, next);
}));
});
_$jscoverage['runner.js'][379]++;
Runner.prototype.uncaught = (function (err) {
  _$jscoverage['runner.js'][380]++;
  debug("uncaught exception");
  _$jscoverage['runner.js'][381]++;
  var runnable = this.currentRunnable;
  _$jscoverage['runner.js'][382]++;
  if ("failed" == runnable.state) {
    _$jscoverage['runner.js'][382]++;
    return;
  }
  _$jscoverage['runner.js'][383]++;
  runnable.clearTimeout();
  _$jscoverage['runner.js'][384]++;
  err.uncaught = true;
  _$jscoverage['runner.js'][385]++;
  this.fail(runnable, err);
  _$jscoverage['runner.js'][388]++;
  if ("test" == runnable.type) {
    _$jscoverage['runner.js'][389]++;
    this.emit("test end", runnable);
    _$jscoverage['runner.js'][390]++;
    this.hookUp("afterEach", this.next);
    _$jscoverage['runner.js'][391]++;
    return;
  }
  _$jscoverage['runner.js'][395]++;
  this.emit("end");
});
_$jscoverage['runner.js'][407]++;
Runner.prototype.run = (function (fn) {
  _$jscoverage['runner.js'][408]++;
  var self = this, fn = fn || (function () {
});
  _$jscoverage['runner.js'][411]++;
  debug("start");
  _$jscoverage['runner.js'][414]++;
  this.on("end", (function () {
  _$jscoverage['runner.js'][415]++;
  debug("end");
  _$jscoverage['runner.js'][416]++;
  process.removeListener("uncaughtException", this.uncaught);
  _$jscoverage['runner.js'][417]++;
  fn(self.failures);
}));
  _$jscoverage['runner.js'][421]++;
  this.emit("start");
  _$jscoverage['runner.js'][422]++;
  this.runSuite(this.suite, (function () {
  _$jscoverage['runner.js'][423]++;
  debug("finished running");
  _$jscoverage['runner.js'][424]++;
  self.emit("end");
}));
  _$jscoverage['runner.js'][428]++;
  process.on("uncaughtException", (function (err) {
  _$jscoverage['runner.js'][429]++;
  self.uncaught(err);
}));
  _$jscoverage['runner.js'][432]++;
  return this;
});
_$jscoverage['runner.js'].source = ["","/**"," * Module dependencies."," */","","var EventEmitter = require('events').EventEmitter","  , debug = require('debug')('runner')","  , Test = require('./test')","  , utils = require('./utils')","  , noop = function(){};","","/**"," * Expose `Runner`."," */","","module.exports = Runner;","","/**"," * Initialize a `Runner` for the given `suite`."," *"," * Events:"," *"," *   - `start`  execution started"," *   - `end`  execution complete"," *   - `suite`  (suite) test suite execution started"," *   - `suite end`  (suite) all tests (and sub-suites) have finished"," *   - `test`  (test) test execution started"," *   - `test end`  (test) test completed"," *   - `hook`  (hook) hook execution started"," *   - `hook end`  (hook) hook complete"," *   - `pass`  (test) test passed"," *   - `fail`  (test, err) test failed"," *"," * @api public"," */","","function Runner(suite) {","  var self = this;","  this._globals = [];","  this.suite = suite;","  this.total = suite.total();","  this.failures = 0;","  this.on('test end', function(test){ self.checkGlobals(test); });","  this.on('hook end', function(hook){ self.checkGlobals(hook); });","  this.grep(/.*/);","  this.globals(utils.keys(global).concat(['errno']));","}","","/**"," * Inherit from `EventEmitter.prototype`."," */","","Runner.prototype.__proto__ = EventEmitter.prototype;","","/**"," * Run tests with full titles matching `re`."," *"," * @param {RegExp} re"," * @return {Runner} for chaining"," * @api public"," */","","Runner.prototype.grep = function(re){","  debug('grep %s', re);","  this._grep = re;","  return this;","};","","/**"," * Allow the given `arr` of globals."," *"," * @param {Array} arr"," * @return {Runner} for chaining"," * @api public"," */","","Runner.prototype.globals = function(arr){","  if (0 == arguments.length) return this._globals;","  debug('globals %j', arr);","  utils.forEach(arr, function(arr){","    this._globals.push(arr);","  }, this);","  return this;","};","","/**"," * Check for global variable leaks."," *"," * @api private"," */","","Runner.prototype.checkGlobals = function(test){","  if (this.ignoreLeaks) return;","","  var leaks = utils.filter(utils.keys(global), function(key){","    return !~utils.indexOf(this._globals, key) &amp;&amp; (!global.navigator || 'onerror' !== key);","  }, this);","","  this._globals = this._globals.concat(leaks);","","  if (leaks.length &gt; 1) {","    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));","  } else if (leaks.length) {","    this.fail(test, new Error('global leak detected: ' + leaks[0]));","  }","};","","/**"," * Fail the given `test`."," *"," * @param {Test} test"," * @param {Error} err"," * @api private"," */","","Runner.prototype.fail = function(test, err){","  ++this.failures;","  test.state = 'failed';","  this.emit('fail', test, err);","};","","/**"," * Fail the given `hook` with `err`."," *"," * Hook failures (currently) hard-end due"," * to that fact that a failing hook will"," * surely cause subsequent tests to fail,"," * causing jumbled reporting."," *"," * @param {Hook} hook"," * @param {Error} err"," * @api private"," */","","Runner.prototype.failHook = function(hook, err){","  this.fail(hook, err);","  this.emit('end');","};","","/**"," * Run hook `name` callbacks and then invoke `fn()`."," *"," * @param {String} name"," * @param {Function} function"," * @api private"," */","","Runner.prototype.hook = function(name, fn){","  var suite = this.suite","    , hooks = suite['_' + name]","    , ms = suite._timeout","    , self = this","    , timer;","","  function next(i) {","    var hook = hooks[i];","    if (!hook) return fn();","    self.currentRunnable = hook;","    hook.ctx.test(self.test);","","    self.emit('hook', hook);","","    hook.on('error', function(err){","      self.failHook(hook, err);","    });","","    hook.run(function(err){","      hook.removeAllListeners('error');","      if (err) return self.failHook(hook, err);","      self.emit('hook end', hook);","      next(++i);","    });","  }","","  process.nextTick(function(){","    next(0);","  });","};","","/**"," * Run hook `name` for the given array of `suites`"," * in order, and callback `fn(err)`."," *"," * @param {String} name"," * @param {Array} suites"," * @param {Function} fn"," * @api private"," */","","Runner.prototype.hooks = function(name, suites, fn){","  var self = this","    , orig = this.suite;","","  function next(suite) {","    self.suite = suite;","","    if (!suite) {","      self.suite = orig;","      return fn();","    }","","    self.hook(name, function(err){","      if (err) {","        self.suite = orig;","        return fn(err);","      }","","      next(suites.pop());","    });","  }","","  next(suites.pop());","};","","/**"," * Run hooks from the top level down."," *"," * @param {String} name"," * @param {Function} fn"," * @api private"," */","","Runner.prototype.hookUp = function(name, fn){","  var suites = [this.suite].concat(this.parents()).reverse();","  this.hooks(name, suites, fn);","};","","/**"," * Run hooks from the bottom up."," *"," * @param {String} name"," * @param {Function} fn"," * @api private"," */","","Runner.prototype.hookDown = function(name, fn){","  var suites = [this.suite].concat(this.parents());","  this.hooks(name, suites, fn);","};","","/**"," * Return an array of parent Suites from"," * closest to furthest."," *"," * @return {Array}"," * @api private"," */","","Runner.prototype.parents = function(){","  var suite = this.suite","    , suites = [];","  while (suite = suite.parent) suites.push(suite);","  return suites;","};","","/**"," * Run the current test and callback `fn(err)`."," *"," * @param {Function} fn"," * @api private"," */","","Runner.prototype.runTest = function(fn){","  var test = this.test","    , self = this;","","  try {","    test.ctx.test(test);","    test.on('error', function(err){","      self.fail(test, err);","    });","    test.run(fn);","  } catch (err) {","    fn(err);","  }","};","","/**"," * Run tests in the given `suite` and invoke"," * the callback `fn()` when complete."," *"," * @param {Suite} suite"," * @param {Function} fn"," * @api private"," */","","Runner.prototype.runTests = function(suite, fn){","  var self = this","    , tests = suite.tests","    , test;","","  function next(err) {","    // if we bail after first err","    if (self.failures &amp;&amp; suite._bail) return fn();","","    // next test","    test = tests.shift();","","    // all done","    if (!test) return fn();","","    // grep","    if (!self._grep.test(test.fullTitle())) return next();","","    // pending","    if (test.pending) {","      self.emit('pending', test);","      self.emit('test end', test);","      return next();","    }","","    // execute test and hook(s)","    self.emit('test', self.test = test);","    self.hookDown('beforeEach', function(){","      self.currentRunnable = self.test;","      self.runTest(function(err){","        test = self.test;","","        if (err) {","          self.fail(test, err);","          self.emit('test end', test);","          return self.hookUp('afterEach', next);","        }","","        test.state = 'passed';","        self.emit('pass', test);","        self.emit('test end', test);","        self.hookUp('afterEach', next);","      });","    });","  }","","  this.next = next;","  next();","};","","/**"," * Run the given `suite` and invoke the"," * callback `fn()` when complete."," *"," * @param {Suite} suite"," * @param {Function} fn"," * @api private"," */","","Runner.prototype.runSuite = function(suite, fn){","  var self = this","    , i = 0;","","  debug('run suite %s', suite.fullTitle());","  this.emit('suite', this.suite = suite);","","  function next() {","    var curr = suite.suites[i++];","    if (!curr) return done();","    self.runSuite(curr, next);","  }","","  function done() {","    self.suite = suite;","    self.hook('afterAll', function(){","      self.emit('suite end', suite);","      fn();","    });","  }","","  this.hook('beforeAll', function(){","    self.runTests(suite, next);","  });","};","","/**"," * Handle uncaught exceptions."," *"," * @param {Error} err"," * @api private"," */","","Runner.prototype.uncaught = function(err){","  debug('uncaught exception');","  var runnable = this.currentRunnable;","  if ('failed' == runnable.state) return;","  runnable.clearTimeout();","  err.uncaught = true;","  this.fail(runnable, err);","","  // recover from test","  if ('test' == runnable.type) {","    this.emit('test end', runnable);","    this.hookUp('afterEach', this.next);","    return;","  }","","  // bail on hooks","  this.emit('end');","};","","/**"," * Run the root suite and invoke `fn(failures)`"," * on completion."," *"," * @param {Function} fn"," * @return {Runner} for chaining"," * @api public"," */","","Runner.prototype.run = function(fn){","  var self = this","    , fn = fn || function(){};","","  debug('start');","","  // callback","  this.on('end', function(){","    debug('end');","    process.removeListener('uncaughtException', this.uncaught);","    fn(self.failures);","  });","","  // run suites","  this.emit('start');","  this.runSuite(this.suite, function(){","    debug('finished running');","    self.emit('end');","  });","","  // uncaught exception","  process.on('uncaughtException', function(err){","    self.uncaught(err);","  });","","  return this;","};"];
