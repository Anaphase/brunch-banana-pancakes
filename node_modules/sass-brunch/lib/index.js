// Generated by CoffeeScript 1.3.3
(function() {
  var SassCompiler, exec, spawn, sysPath, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  sysPath = require('path');

  module.exports = SassCompiler = (function() {
    var sassExe;

    SassCompiler.prototype.brunchPlugin = true;

    SassCompiler.prototype.type = 'stylesheet';

    SassCompiler.prototype.extension = 'scss';

    SassCompiler.prototype.pattern = /\.s[ac]ss$/;

    SassCompiler.prototype._dependencyRegExp = /@import ['"](.*)['"]/g;

    sassExe = 'sass';

    if (global.process.platform === 'win32') {
      sassExe = 'sass.bat';
    }

    function SassCompiler(config) {
      var _this = this;
      this.config = config;
      this.getDependencies = __bind(this.getDependencies, this);

      exec(sassExe + ' --version', function(error, stdout, stderr) {
        if (error) {
          console.error("You need to have Sass on your system");
          return console.error("Execute `gem install sass`");
        }
      });
      exec('compass --version', function(error, stdout, stderr) {
        return _this.compass = !error;
      });
    }

    SassCompiler.prototype.compile = function(data, path, callback) {
      var delay, error, execute, options, result,
        _this = this;
      result = '';
      error = null;
      options = ['--stdin', '--load-path', this.config.paths.root, '--load-path', sysPath.dirname(path), '--no-cache'];
      if (this.compass) {
        options.push('--compass');
      }
      if (/\.scss$/.test(path)) {
        options.push('--scss');
      }
      execute = function() {
        var sass;
        sass = spawn(sassExe, options);
        sass.stdout.on('data', function(buffer) {
          return result += buffer.toString();
        });
        sass.stderr.on('data', function(buffer) {
          if (error == null) {
            error = '';
          }
          return error += buffer.toString();
        });
        sass.on('exit', function(code) {
          return callback(error, result);
        });
        return sass.stdin.end(data);
      };
      delay = function() {
        if (_this.compass != null) {
          return execute();
        } else {
          return setTimeout(delay, 100);
        }
      };
      return delay();
    };

    SassCompiler.prototype.getDependencies = function(data, path, callback) {
      var dependencies, parent, paths,
        _this = this;
      paths = data.match(this._dependencyRegExp) || [];
      parent = sysPath.dirname(path);
      dependencies = paths.map(function(path) {
        var res;
        res = _this._dependencyRegExp.exec(path);
        _this._dependencyRegExp.lastIndex = 0;
        return (res || [])[1];
      }).filter(function(path) {
        return !!path && path.indexOf('compass') !== 0;
      }).map(function(path) {
        path = path.replace(/(\w+\.|\w+$)/, '_$1');
        if (sysPath.extname(path) !== ("." + _this.extension)) {
          return "" + path + "." + _this.extension;
        } else {
          return path;
        }
      }).map(sysPath.join.bind(null, parent));
      return process.nextTick(function() {
        return callback(null, dependencies);
      });
    };

    return SassCompiler;

  })();

}).call(this);
